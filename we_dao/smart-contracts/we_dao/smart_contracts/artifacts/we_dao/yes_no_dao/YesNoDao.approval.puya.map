{
  "version": 3,
  "sources": [
    "/home/arthur/Documents/retreat/WeDev/we_dao/smart-contracts/we_dao/smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAyLG;;AAAA;AAAA;AAAA;;AAAA;AAzLH;;;AAAA;AAyLG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA/KH;;;AAAA;AAAA;;;AAAA;AAAA;;AA+KG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA5DA;;AAAA;AAAA;AAAA;;AAAA;AAnHH;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmHG;;;AAAA;;AA/CA;;AAAA;AAAA;AAAA;;AAAA;AApEH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoEG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAtDH;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAsDG;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAtBH;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAsBG;;;AAAA;;AAAD;;;AApBA;AAuBmC;;AAAjC;AApBF;AAuB8B;AAA5B;AApBF;AAuBE;;AAAA;AAjBF;AAmBE;;AAAA;AAtBF;;AAyBE;;AAAA;AAGA;AAI8B;;AAAxB;AAGU;;AAGG;;;AAFR;;;;;;;;;;AALL;;;;;;;;;;AAEA;;;;;;;;;;;;AALN;;;;AASS;;;AATT;;AAeF;;;AApDA;AAAA;AAAA;AAAA;AAuD4C;;AAAnC;AAAP;AAjDF;AAmDE;;AAAA;AA7CF;AAgDE;;AAAA;AAnDF;;AAsDE;;AAAA;;AAGF;;;AA5DA;AAAA;AAAA;AAAA;AAmEE;;;AAzEF;AAAA;AAAA;AAAA;AA0E8C;;AAAnC;AAAP;AAIyC;;AAI5B;;AAAA;;AAAU;AAAlB;AAAP;AAGe;;AAAA;;AAAuB;;AAA/B;AAAP;AAGM;AAAA;;AAAoC;AAGb;AACD;AAAA;AAGa;;AACM;;AAAiB;;;AAAjB;AAAA;;AAAA;AAAb;AAAA;AAAA;AAAA;;;AAAA;AAAA;AANC;;AAAA;;AAAA;AAGX;;AAHW;AAIb;;AAJa;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAvFrC;AAAA;AAAA;AAAA;AAiG8D;AAA5B;AAGV;AAAA;AAxFyC;;AAAA;AAAA;AAwFL;AAAA;AAAA;;AAAnD;AAAP;AApGF;AAuGE;;AAAA;AAGA;AAAA;;AAAA;AAAA;;AAIF;;;AAIkB;;AAAA;AAtG+C;;AAAA;;AAAA;AAsGhB;AAAA;AAAA;;AAD/C;AAQsC;;AAFvB;;AAAA;AAAA;AAxGoC;;AAAA;AAAA;AA8GzB;AAAA;AAAA;;AAAnB;AAAP;AAGuF;;AAAA;AAAA;AAGzD;;AACxB;;AAA6B;AAA0B;AACtD;;AAAA;AAAP;AAGW;;AA3Ib;AAAA;AAAA;AAAA;AA2IS;AAAP;AAGe;;AAAA;;AAAU;AAAlB;AAAP;AAGe;;AAAA;;AAAuB;;AAA/B;AAAP;AAGkE;;AA3IpE;AAAA;;AAAA;AAAA;AA2ImC;;AAAA;AAxInC;AAAA;AAAA;AAAA;AA0IS;AAAP;AAIkB;AAI+C;;AAArB;;AAAqB;AAAS;AAA9C;AACsC;;AAAnB;;AAAmB;AAA5D;;AAAyB;AAIQ;AAAA;AAAvC;;AAAA;AAAA;;AACqC;AAAA;AAArC;;AAGA;;AAAA;AAEA;;AAAA;;AAAA;;AAIF;;;AAGiB;;AAAA;AADA;;AAAA;AA7JoC;;AAAA;AAAA;AAkK1B;AAAA;;AAAzB;AAGF;;;AAEmD;;AAAA;AA1Kc;;AAAA;AAAA;AA0KiB;AAAA;AAChF",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 16490"
    },
    "8": {
      "op": "bytecblock \"manager_address\" \"proposal_count\" \"anyone_can_create\" \"minimum_holding\" \"asset_id\" \"_p\" 0x151f7c75 0x0000000000000000 \"_v\""
    },
    "104": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "106": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "109": {
      "op": "pushbytess 0xf15e53b2 0x21b89dde 0xef0ffc68 0x6b509907 0x97d5cecd 0xf812fd3d // method \"createApplication(bool,uint64,uint64)void\", method \"configureContract(bool,uint64,uint64)void\", method \"createProposal(string,string,uint64,pay)void\", method \"voteProposal(uint64,bool,pay)void\", method \"hasVoted(uint64,account)bool\", method \"getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)\"",
      "defined_out": [
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,address,string))",
        "Method(hasVoted(uint64,account)bool)",
        "Method(voteProposal(uint64,bool,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(voteProposal(uint64,bool,pay)void)",
        "Method(hasVoted(uint64,account)bool)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,address,string))"
      ]
    },
    "141": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,address,string))",
        "Method(hasVoted(uint64,account)bool)",
        "Method(voteProposal(uint64,bool,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(voteProposal(uint64,bool,pay)void)",
        "Method(hasVoted(uint64,account)bool)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,address,string))",
        "tmp%2#0"
      ]
    },
    "144": {
      "op": "match main_createApplication_route@3 main_configureContract_route@4 main_createProposal_route@5 main_voteProposal_route@6 main_hasVoted_route@7 main_getProposal_route@8",
      "stack_out": []
    },
    "158": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "159": {
      "op": "return",
      "stack_out": []
    },
    "160": {
      "block": "main_getProposal_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "162": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "163": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "164": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "166": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "167": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "170": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "171": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.getProposal",
      "op": "callsub getProposal",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "174": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "0x151f7c75"
      ]
    },
    "176": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%47#0"
      ]
    },
    "177": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "178": {
      "op": "log",
      "stack_out": []
    },
    "179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "return",
      "stack_out": []
    },
    "181": {
      "block": "main_hasVoted_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "183": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "187": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "188": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "191": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "192": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "195": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "196": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0"
      ]
    },
    "198": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.hasVoted",
      "op": "callsub hasVoted",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "201": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "204": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "205": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "207": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "208": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "210": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "211": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "212": {
      "op": "log",
      "stack_out": []
    },
    "213": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "return",
      "stack_out": []
    },
    "215": {
      "block": "main_voteProposal_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "217": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "218": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "219": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "221": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "222": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "225": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "226": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "229": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%2#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "reinterpret_bytes[1]%2#0",
        "0"
      ]
    },
    "230": {
      "op": "getbit",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "231": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "233": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "tmp%33#0",
        "1"
      ]
    },
    "234": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "gtxn_idx%1#0"
      ]
    },
    "235": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "236": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "238": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "240": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0",
        "gtxn_idx%1#0"
      ]
    },
    "241": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.voteProposal",
      "op": "callsub voteProposal",
      "stack_out": []
    },
    "244": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "return",
      "stack_out": []
    },
    "246": {
      "block": "main_createProposal_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "249": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "250": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "252": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "253": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "256": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "259": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "262": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "265": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "268": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "269": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "1"
      ]
    },
    "272": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "gtxn_idx%0#0"
      ]
    },
    "273": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "274": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "276": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "277": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "278": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "gtxn_idx%0#0"
      ]
    },
    "279": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createProposal",
      "op": "callsub createProposal",
      "stack_out": []
    },
    "282": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "283": {
      "op": "return",
      "stack_out": []
    },
    "284": {
      "block": "main_configureContract_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "286": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "287": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "288": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "290": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "291": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "294": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0",
        "0"
      ]
    },
    "295": {
      "op": "getbit",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "299": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "300": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "303": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "304": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.configureContract",
      "op": "callsub configureContract",
      "stack_out": []
    },
    "307": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "308": {
      "op": "return",
      "stack_out": []
    },
    "309": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "311": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "312": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "313": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "315": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "316": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "317": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "320": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "321": {
      "op": "getbit",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "322": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "325": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "326": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "329": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "330": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "333": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "return",
      "stack_out": []
    },
    "335": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createApplication",
      "params": {
        "anyone_can_create#0": "uint64",
        "minimum_holding#0": "uint64",
        "asset_id#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "338": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\""
      ],
      "stack_out": [
        "\"manager_address\""
      ]
    },
    "339": {
      "op": "txn Sender",
      "defined_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ]
    },
    "341": {
      "op": "app_global_put",
      "stack_out": []
    },
    "342": {
      "op": "bytec_1 // \"proposal_count\"",
      "defined_out": [
        "\"proposal_count\""
      ],
      "stack_out": [
        "\"proposal_count\""
      ]
    },
    "343": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"proposal_count\"",
        "0"
      ],
      "stack_out": [
        "\"proposal_count\"",
        "0"
      ]
    },
    "344": {
      "op": "app_global_put",
      "stack_out": []
    },
    "345": {
      "op": "bytec_2 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\""
      ],
      "stack_out": [
        "\"anyone_can_create\""
      ]
    },
    "346": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ],
      "stack_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ]
    },
    "348": {
      "op": "app_global_put",
      "stack_out": []
    },
    "349": {
      "op": "bytec_3 // \"minimum_holding\"",
      "defined_out": [
        "\"minimum_holding\""
      ],
      "stack_out": [
        "\"minimum_holding\""
      ]
    },
    "350": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"minimum_holding\"",
        "minimum_holding#0 (copy)"
      ],
      "stack_out": [
        "\"minimum_holding\"",
        "minimum_holding#0 (copy)"
      ]
    },
    "352": {
      "op": "app_global_put",
      "stack_out": []
    },
    "353": {
      "op": "bytec 4 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "355": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asset_id\"",
        "asset_id#0 (copy)"
      ],
      "stack_out": [
        "\"asset_id\"",
        "asset_id#0 (copy)"
      ]
    },
    "357": {
      "op": "app_global_put",
      "stack_out": []
    },
    "358": {
      "op": "itxn_begin"
    },
    "359": {
      "op": "global CallerApplicationID",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "361": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "362": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "364": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#0"
      ]
    },
    "365": {
      "op": "itxn_field Accounts",
      "stack_out": [
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "367": {
      "op": "pushint 738153983 // 738153983",
      "defined_out": [
        "738153983",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "738153983"
      ]
    },
    "373": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "375": {
      "op": "itxn_field Sender",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "377": {
      "op": "pushbytes 0x8246c525 // method \"createProjectMicroDapp(uint64,uint64)void\"",
      "defined_out": [
        "Method(createProjectMicroDapp(uint64,uint64)void)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "Method(createProjectMicroDapp(uint64,uint64)void)"
      ]
    },
    "383": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "385": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "387": {
      "op": "pushbytes 0x0000000000000001",
      "defined_out": [
        "0x0000000000000001"
      ],
      "stack_out": [
        "0x0000000000000001"
      ]
    },
    "397": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "399": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "401": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "404": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "406": {
      "op": "itxn_submit"
    },
    "407": {
      "retsub": true,
      "op": "retsub"
    },
    "408": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.configureContract",
      "params": {
        "anyone_can_create#0": "uint64",
        "minimum_holding#0": "uint64",
        "assetId#0": "uint64"
      },
      "block": "configureContract",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "411": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "412": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"manager_address\""
      ]
    },
    "413": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "414": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "415": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "418": {
      "error": "Only the manager can configure the contract",
      "op": "assert // Only the manager can configure the contract",
      "stack_out": []
    },
    "419": {
      "op": "bytec_2 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\""
      ],
      "stack_out": [
        "\"anyone_can_create\""
      ]
    },
    "420": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ],
      "stack_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ]
    },
    "422": {
      "op": "app_global_put",
      "stack_out": []
    },
    "423": {
      "op": "bytec_3 // \"minimum_holding\"",
      "defined_out": [
        "\"minimum_holding\""
      ],
      "stack_out": [
        "\"minimum_holding\""
      ]
    },
    "424": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"minimum_holding\"",
        "minimum_holding#0 (copy)"
      ],
      "stack_out": [
        "\"minimum_holding\"",
        "minimum_holding#0 (copy)"
      ]
    },
    "426": {
      "op": "app_global_put",
      "stack_out": []
    },
    "427": {
      "op": "bytec 4 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\""
      ],
      "stack_out": [
        "\"asset_id\""
      ]
    },
    "429": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asset_id\"",
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "\"asset_id\"",
        "assetId#0 (copy)"
      ]
    },
    "431": {
      "op": "app_global_put",
      "stack_out": []
    },
    "432": {
      "retsub": true,
      "op": "retsub"
    },
    "433": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createProposal",
      "params": {
        "proposal_title#0": "bytes",
        "proposal_description#0": "bytes",
        "expires_in#0": "uint64",
        "mbr_txn#0": "uint64"
      },
      "block": "createProposal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "436": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "437": {
      "op": "bytec_2 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"anyone_can_create\""
      ]
    },
    "438": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "439": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "440": {
      "op": "bnz createProposal_after_if_else@2",
      "stack_out": []
    },
    "443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "444": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"manager_address\""
      ]
    },
    "445": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "446": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "447": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "449": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "450": {
      "error": "Only the manager can create proposals",
      "op": "assert // Only the manager can create proposals",
      "stack_out": []
    },
    "451": {
      "block": "createProposal_after_if_else@2",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentTimestamp#0"
      ],
      "stack_out": [
        "currentTimestamp#0"
      ]
    },
    "453": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentTimestamp#0",
        "mbr_txn#0 (copy)"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "455": {
      "op": "gtxns Amount",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%3#0"
      ]
    },
    "457": {
      "op": "intc_2 // 16490",
      "defined_out": [
        "16490",
        "currentTimestamp#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%3#0",
        "16490"
      ]
    },
    "458": {
      "op": ">=",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%4#0"
      ]
    },
    "459": {
      "error": "Payment must cover the box MBR",
      "op": "assert // Payment must cover the box MBR",
      "stack_out": [
        "currentTimestamp#0"
      ]
    },
    "460": {
      "op": "frame_dig -1",
      "stack_out": [
        "currentTimestamp#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "462": {
      "op": "gtxns Receiver",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%5#0"
      ]
    },
    "464": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "466": {
      "op": "==",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%7#0"
      ]
    },
    "467": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": [
        "currentTimestamp#0"
      ]
    },
    "468": {
      "op": "dup",
      "defined_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)"
      ]
    },
    "469": {
      "op": "frame_dig -2",
      "defined_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)",
        "expires_in#0 (copy)"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)",
        "expires_in#0 (copy)"
      ]
    },
    "471": {
      "op": "+",
      "defined_out": [
        "currentTimestamp#0",
        "proposal_expiry_timestamp#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "proposal_expiry_timestamp#0"
      ]
    },
    "472": {
      "op": "itob",
      "defined_out": [
        "currentTimestamp#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "val_as_bytes%0#0"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "currentTimestamp#0"
      ]
    },
    "474": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "475": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0"
      ]
    },
    "477": {
      "op": "frame_dig -4",
      "defined_out": [
        "proposal_title#0 (copy)",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "proposal_title#0 (copy)"
      ]
    },
    "479": {
      "op": "pushbytes \":\"",
      "defined_out": [
        "\":\"",
        "proposal_title#0 (copy)",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "proposal_title#0 (copy)",
        "\":\""
      ]
    },
    "482": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "483": {
      "op": "frame_dig -3",
      "defined_out": [
        "proposal_description#0 (copy)",
        "tmp%8#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "tmp%9#0",
        "proposal_description#0 (copy)"
      ]
    },
    "485": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "to_encode%0#0"
      ]
    },
    "486": {
      "op": "dup",
      "defined_out": [
        "tmp%8#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "487": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "488": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "489": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "tmp%8#0",
        "to_encode%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "492": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "493": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%8#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%8#0",
        "encoded_value%0#0"
      ]
    },
    "494": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "tmp%8#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "496": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%8#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "498": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "499": {
      "op": "bytec 7 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "501": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "502": {
      "op": "bytec 7 // 0x0000000000000000",
      "stack_out": [
        "tmp%8#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "504": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "505": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%8#0"
      ]
    },
    "507": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "508": {
      "op": "pushbytes 0x0042",
      "defined_out": [
        "0x0042",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0",
        "0x0042"
      ]
    },
    "512": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0"
      ]
    },
    "515": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "0"
      ]
    },
    "516": {
      "op": "bytec_1 // \"proposal_count\"",
      "defined_out": [
        "\"proposal_count\"",
        "0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "0",
        "\"proposal_count\""
      ]
    },
    "517": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "518": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0"
      ]
    },
    "519": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "520": {
      "op": "+",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0"
      ]
    },
    "521": {
      "op": "dup",
      "defined_out": [
        "newProposalNonce#0",
        "newProposalNonce#0 (copy)",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "newProposalNonce#0 (copy)"
      ]
    },
    "522": {
      "op": "itob",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "val_as_bytes%2#0"
      ]
    },
    "523": {
      "op": "bytec 5 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "newProposalNonce#0",
        "proposal#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "val_as_bytes%2#0",
        "\"_p\""
      ]
    },
    "525": {
      "op": "swap",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "\"_p\"",
        "val_as_bytes%2#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%10#0"
      ]
    },
    "527": {
      "op": "dup",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "528": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "newProposalNonce#0",
        "proposal#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%10#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "529": {
      "op": "bury 1",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%10#0",
        "maybe_exists%3#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "532": {
      "error": "Proposal already exists",
      "op": "assert // Proposal already exists",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%10#0"
      ]
    },
    "533": {
      "op": "bytec_1 // \"proposal_count\"",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%10#0",
        "\"proposal_count\""
      ]
    },
    "534": {
      "op": "uncover 2",
      "stack_out": [
        "proposal#0",
        "tmp%10#0",
        "\"proposal_count\"",
        "newProposalNonce#0"
      ]
    },
    "536": {
      "op": "app_global_put",
      "stack_out": [
        "proposal#0",
        "tmp%10#0"
      ]
    },
    "537": {
      "op": "dup",
      "stack_out": [
        "proposal#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "538": {
      "op": "box_del",
      "defined_out": [
        "proposal#0",
        "tmp%10#0",
        "{box_del}"
      ],
      "stack_out": [
        "proposal#0",
        "tmp%10#0",
        "{box_del}"
      ]
    },
    "539": {
      "op": "pop",
      "stack_out": [
        "proposal#0",
        "tmp%10#0"
      ]
    },
    "540": {
      "op": "swap",
      "stack_out": [
        "tmp%10#0",
        "proposal#0"
      ]
    },
    "541": {
      "op": "box_put",
      "stack_out": []
    },
    "542": {
      "retsub": true,
      "op": "retsub"
    },
    "543": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.voteProposal",
      "params": {
        "proposal_id#0": "uint64",
        "vote#0": "uint64",
        "mbr_txn#0": "uint64"
      },
      "block": "voteProposal",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "546": {
      "op": "frame_dig -3",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "548": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "549": {
      "op": "bytec 5 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "551": {
      "op": "dig 1",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\"",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "553": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "554": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "555": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "556": {
      "op": "bury 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "558": {
      "error": "The proposal the user is trying to vote on does not exist",
      "op": "assert // The proposal the user is trying to vote on does not exist",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "559": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "561": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "563": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "564": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "voteId#0"
      ]
    },
    "565": {
      "op": "bytec 8 // \"_v\"",
      "defined_out": [
        "\"_v\"",
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "voteId#0",
        "\"_v\""
      ]
    },
    "567": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"_v\"",
        "voteId#0"
      ]
    },
    "568": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "569": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "570": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "571": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "573": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "574": {
      "error": "The user has already voted on this proposal",
      "op": "assert // The user has already voted on this proposal",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "575": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "577": {
      "op": "box_get",
      "defined_out": [
        "currentProposal#0",
        "maybe_exists%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "maybe_exists%2#0"
      ]
    },
    "578": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0"
      ]
    },
    "579": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "581": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "currentProposal#0 (copy)"
      ]
    },
    "583": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "currentProposal#0 (copy)",
        "0"
      ]
    },
    "584": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "expiryTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "expiryTime#0"
      ]
    },
    "585": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "currentTime#0 (copy)",
        "expiryTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "expiryTime#0",
        "currentTime#0 (copy)"
      ]
    },
    "587": {
      "op": ">",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%6#0"
      ]
    },
    "588": {
      "error": "The proposal has expired",
      "op": "assert // The proposal has expired",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "589": {
      "op": "txn Sender",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0"
      ]
    },
    "591": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "0"
      ]
    },
    "592": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "0",
        "\"manager_address\""
      ]
    },
    "593": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "594": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "maybe_value%3#0"
      ]
    },
    "595": {
      "op": "!=",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%8#0"
      ]
    },
    "596": {
      "error": "The manager cannot vote on proposals",
      "op": "assert // The manager cannot vote on proposals",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "597": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "mbr_txn#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "599": {
      "op": "gtxns Amount",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%9#0"
      ]
    },
    "601": {
      "op": "intc_2 // 16490",
      "defined_out": [
        "16490",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%9#0",
        "16490"
      ]
    },
    "602": {
      "op": ">=",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%10#0"
      ]
    },
    "603": {
      "error": "Payment must cover the vote box MBR",
      "op": "assert // Payment must cover the vote box MBR",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "604": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "606": {
      "op": "gtxns Receiver",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%11#0"
      ]
    },
    "608": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "610": {
      "op": "==",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%13#0"
      ]
    },
    "611": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "612": {
      "op": "txn Sender",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%14#0"
      ]
    },
    "614": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%14#0",
        "0"
      ]
    },
    "615": {
      "op": "bytec 4 // \"asset_id\"",
      "defined_out": [
        "\"asset_id\"",
        "0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%14#0",
        "0",
        "\"asset_id\""
      ]
    },
    "617": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%14#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "618": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%14#0",
        "maybe_value%4#0"
      ]
    },
    "619": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "currentProposal#0",
        "currentTime#0",
        "hasAsset#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "assetBalance#0",
        "hasAsset#0"
      ]
    },
    "621": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "assetBalance#0"
      ]
    },
    "622": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "assetBalance#0",
        "0"
      ]
    },
    "623": {
      "op": "bytec_3 // \"minimum_holding\"",
      "defined_out": [
        "\"minimum_holding\"",
        "0",
        "assetBalance#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "assetBalance#0",
        "0",
        "\"minimum_holding\""
      ]
    },
    "624": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetBalance#0",
        "currentProposal#0",
        "currentTime#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "assetBalance#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "625": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "assetBalance#0",
        "maybe_value%5#0"
      ]
    },
    "626": {
      "op": ">=",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%15#0"
      ]
    },
    "627": {
      "error": "The user does not have enough asset to vote",
      "op": "assert // The user does not have enough asset to vote",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "628": {
      "op": "itob",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0"
      ]
    },
    "629": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "currentProposal#0 (copy)"
      ]
    },
    "631": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "currentProposal#0 (copy)",
        "16"
      ]
    },
    "633": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "tmp%17#0"
      ]
    },
    "634": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "currentProposal#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "tmp%17#0",
        "1"
      ]
    },
    "635": {
      "op": "+",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0"
      ]
    },
    "636": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "currentProposal#0 (copy)"
      ]
    },
    "638": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "currentProposal#0 (copy)",
        "24"
      ]
    },
    "640": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%19#0",
        "tmp%2#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "tmp%19#0"
      ]
    },
    "641": {
      "op": "frame_dig -2",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%19#0",
        "tmp%2#0",
        "updatedVotes#0",
        "vote#0 (copy)",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "tmp%19#0",
        "vote#0 (copy)"
      ]
    },
    "643": {
      "op": "+",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0"
      ]
    },
    "644": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedVotes#0"
      ]
    },
    "645": {
      "op": "itob",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedYesVotes#0",
        "val_as_bytes%4#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedYesVotes#0",
        "val_as_bytes%4#0"
      ]
    },
    "646": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "val_as_bytes%4#0",
        "currentProposal#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "currentProposal#0",
        "val_as_bytes%4#0"
      ]
    },
    "649": {
      "op": "replace2 16",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "updatedProposal#1",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedProposal#1"
      ]
    },
    "651": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1",
        "updatedYesVotes#0"
      ]
    },
    "652": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "updatedProposal#1",
        "val_as_bytes%5#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1",
        "val_as_bytes%5#0"
      ]
    },
    "653": {
      "op": "replace2 24",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1"
      ]
    },
    "655": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "tmp%2#0",
        "voteData#0"
      ]
    },
    "657": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "658": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "tmp%0#0 (copy)"
      ]
    },
    "660": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ]
    },
    "661": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "662": {
      "op": "box_put",
      "stack_out": []
    },
    "663": {
      "retsub": true,
      "op": "retsub"
    },
    "664": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.hasVoted",
      "params": {
        "proposal_id#0": "uint64",
        "voter#0": "bytes"
      },
      "block": "hasVoted",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "667": {
      "op": "frame_dig -2",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "669": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "670": {
      "op": "frame_dig -1",
      "defined_out": [
        "val_as_bytes%0#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "voter#0 (copy)"
      ]
    },
    "672": {
      "op": "concat",
      "defined_out": [
        "voteId#0"
      ],
      "stack_out": [
        "voteId#0"
      ]
    },
    "673": {
      "op": "bytec 8 // \"_v\"",
      "defined_out": [
        "\"_v\"",
        "voteId#0"
      ],
      "stack_out": [
        "voteId#0",
        "\"_v\""
      ]
    },
    "675": {
      "op": "swap",
      "stack_out": [
        "\"_v\"",
        "voteId#0"
      ]
    },
    "676": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "677": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "678": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "680": {
      "retsub": true,
      "op": "retsub"
    },
    "681": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.getProposal",
      "params": {
        "proposal_id#0": "uint64"
      },
      "block": "getProposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "684": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "686": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "687": {
      "op": "bytec 5 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "689": {
      "op": "swap",
      "stack_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ]
    },
    "690": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "691": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_exists%0#0"
      ]
    },
    "692": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "proposal#0"
      ]
    },
    "693": {
      "retsub": true,
      "op": "retsub"
    }
  }
}