#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x0000000000000000 "manager_address" "proposal_count" "anyone_can_create" "_p"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:17
    // export class WeDao extends Contract {
    txn NumAppArgs
    bz main_after_if_else@9
    pushbytess 0xcb4abfb5 0xef0ffc68 0x6b509907 // method "createApplication(bool)void", method "createProposal(string,string,uint64,pay)void", method "voteProposal(uint64,bool,pay)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_createProposal_route@4 main_voteProposal_route@5

main_after_if_else@9:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:17
    // export class WeDao extends Contract {
    intc_1 // 0
    return

main_voteProposal_route@5:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:86
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:17
    // export class WeDao extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_1 // 0
    getbit
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:86
    // @abimethod({ allowActions: 'NoOp' })
    callsub voteProposal
    intc_0 // 1
    return

main_createProposal_route@4:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:42
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:17
    // export class WeDao extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:42
    // @abimethod({ allowActions: 'NoOp' })
    callsub createProposal
    intc_0 // 1
    return

main_createApplication_route@3:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:30
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:17
    // export class WeDao extends Contract {
    txna ApplicationArgs 1
    intc_1 // 0
    getbit
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:30
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_0 // 1
    return


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::WeDao.createApplication(anyone_can_create: uint64) -> void:
createApplication:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:30-31
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(anyone_can_create: boolean): void {
    proto 1 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // manager_address = GlobalState<Account>()
    bytec_1 // "manager_address"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:33
    // this.manager_address.value = Txn.sender
    txn Sender
    app_global_put
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:22
    // proposal_count = GlobalState<uint64>()
    bytec_2 // "proposal_count"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:36
    // this.proposal_count.value = 0
    intc_1 // 0
    app_global_put
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:25
    // anyone_can_create = GlobalState<boolean>()
    bytec_3 // "anyone_can_create"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:39
    // this.anyone_can_create.value = anyone_can_create
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::WeDao.createProposal(proposal_title: bytes, proposal_description: bytes, expires_in: uint64, mbr_txn: uint64) -> void:
createProposal:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:42-48
    // @abimethod({ allowActions: 'NoOp' })
    // public createProposal(
    //   proposal_title: string,
    //   proposal_description: string,
    //   expires_in: uint64,
    //   mbr_txn: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:25
    // anyone_can_create = GlobalState<boolean>()
    intc_1 // 0
    bytec_3 // "anyone_can_create"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:49
    // if (this.anyone_can_create.value === false) {
    bnz createProposal_after_if_else@2
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // manager_address = GlobalState<Account>()
    intc_1 // 0
    bytec_1 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:50
    // assert(this.manager_address.value === Txn.sender, 'Only the manager can create proposals')
    txn Sender
    ==
    assert // Only the manager can create proposals

createProposal_after_if_else@2:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:54
    // const currentTimestamp: uint64 = op.Global.latestTimestamp
    global LatestTimestamp
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:59
    // const proposal_expiry_timestamp: uint64 = currentTimestamp + expires_in
    dup
    frame_dig -2
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:62
    // proposal_title: new arc4.Str(proposal_title),
    frame_dig -4
    len
    itob
    extract 6 2
    frame_dig -4
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:63
    // proposal_description: new arc4.Str(proposal_description),
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:64
    // proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    uncover 2
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:65
    // proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    uncover 3
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:61-71
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_title: new arc4.Str(proposal_title),
    //   proposal_description: new arc4.Str(proposal_description),
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(0),
    //   proposal_prize_pool: new arc4.UintN64(0),
    //   vote_price: new arc4.UintN64(0),
    // })
    dig 3
    len
    pushint 60 // 60
    +
    itob
    extract 6 2
    pushbytes 0x003c
    swap
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:66
    // proposal_total_votes: new arc4.UintN64(0),
    bytec_0 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:61-71
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_title: new arc4.Str(proposal_title),
    //   proposal_description: new arc4.Str(proposal_description),
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(0),
    //   proposal_prize_pool: new arc4.UintN64(0),
    //   vote_price: new arc4.UintN64(0),
    // })
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:67
    // proposal_yes_votes: new arc4.UintN64(0),
    bytec_0 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:61-71
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_title: new arc4.Str(proposal_title),
    //   proposal_description: new arc4.Str(proposal_description),
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(0),
    //   proposal_prize_pool: new arc4.UintN64(0),
    //   vote_price: new arc4.UintN64(0),
    // })
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:69
    // proposal_prize_pool: new arc4.UintN64(0),
    bytec_0 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:61-71
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_title: new arc4.Str(proposal_title),
    //   proposal_description: new arc4.Str(proposal_description),
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(0),
    //   proposal_prize_pool: new arc4.UintN64(0),
    //   vote_price: new arc4.UintN64(0),
    // })
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:68
    // proposal_asset: new arc4.UintN64(0),
    bytec_0 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:61-71
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_title: new arc4.Str(proposal_title),
    //   proposal_description: new arc4.Str(proposal_description),
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(0),
    //   proposal_prize_pool: new arc4.UintN64(0),
    //   vote_price: new arc4.UintN64(0),
    // })
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:70
    // vote_price: new arc4.UintN64(0),
    bytec_0 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:61-71
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_title: new arc4.Str(proposal_title),
    //   proposal_description: new arc4.Str(proposal_description),
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(0),
    //   proposal_prize_pool: new arc4.UintN64(0),
    //   vote_price: new arc4.UintN64(0),
    // })
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:22
    // proposal_count = GlobalState<uint64>()
    intc_1 // 0
    bytec_2 // "proposal_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:74
    // const newProposalNonce = Uint64(this.proposal_count.value + 1)
    intc_0 // 1
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:77
    // assert(!this.proposal(new arc4.UintN64(newProposalNonce)).exists, 'Proposal already exists')
    dup
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:28
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec 4 // "_p"
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:77
    // assert(!this.proposal(new arc4.UintN64(newProposalNonce)).exists, 'Proposal already exists')
    dup
    box_len
    bury 1
    !
    assert // Proposal already exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:22
    // proposal_count = GlobalState<uint64>()
    bytec_2 // "proposal_count"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:80
    // this.proposal_count.value = newProposalNonce
    uncover 2
    app_global_put
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:83
    // this.proposal(new arc4.UintN64(newProposalNonce)).value = proposal.copy()
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::WeDao.voteProposal(proposal_id: uint64, vote: uint64, mbr_txn: uint64) -> void:
voteProposal:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:86-87
    // @abimethod({ allowActions: 'NoOp' })
    // public voteProposal(proposal_id: uint64, vote: boolean, mbr_txn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:90
    // this.proposal(new arc4.UintN64(proposal_id)).exists,
    frame_dig -3
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:28
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec 4 // "_p"
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:90
    // this.proposal(new arc4.UintN64(proposal_id)).exists,
    dup
    box_len
    bury 1
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:89-92
    // assert(
    //   this.proposal(new arc4.UintN64(proposal_id)).exists,
    //   'The proposal the user is trying to vote on does not exist',
    // )
    assert // The proposal the user is trying to vote on does not exist
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:95
    // const currentProposal: ProposalDataType = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:100
    // const updatedVotes = Uint64(currentProposal.proposal_total_votes.native + 1)
    dup
    pushint 20 // 20
    extract_uint64
    intc_0 // 1
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:102
    // assert(Txn.sender !== this.manager_address.value, 'The manager cannot vote on proposals')
    txn Sender
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // manager_address = GlobalState<Account>()
    intc_1 // 0
    bytec_1 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:102
    // assert(Txn.sender !== this.manager_address.value, 'The manager cannot vote on proposals')
    !=
    assert // The manager cannot vote on proposals
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:106
    // updatedProposal.proposal_total_votes = new arc4.UintN64(updatedVotes)
    itob
    dig 1
    swap
    replace2 20
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:107
    // updatedProposal.proposal_yes_votes = new arc4.UintN64(currentProposal.proposal_yes_votes.native + (vote ? 1 : 0))
    swap
    pushint 28 // 28
    extract_uint64
    frame_dig -2
    +
    itob
    replace2 28
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:110
    // this.proposal(new arc4.UintN64(proposal_id)).value = updatedProposal.copy()
    dig 1
    box_del
    pop
    box_put
    retsub
