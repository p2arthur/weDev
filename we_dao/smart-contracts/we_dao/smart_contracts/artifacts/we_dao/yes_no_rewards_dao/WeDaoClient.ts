/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"WeDao","structs":{"ProposalDataType":[{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"proposalExpiryTimestamp","type":"uint64"},{"name":"proposalStartTimestamp","type":"uint64"},{"name":"proposalTotalVotes","type":"uint64"},{"name":"proposalYesVotes","type":"uint64"},{"name":"proposalPrizePool","type":"uint64"},{"name":"proposalAsset","type":"uint64"},{"name":"votePrice","type":"uint64"}]},"methods":[{"name":"createApplication","args":[{"type":"bool","name":"anyone_can_create"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"createProposal","args":[{"type":"string","name":"proposal_title"},{"type":"string","name":"proposal_description"},{"type":"uint64","name":"expires_in"},{"type":"pay","name":"mbr_txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"voteProposal","args":[{"type":"uint64","name":"proposal_id"},{"type":"bool","name":"vote"},{"type":"pay","name":"mbr_txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager_address":{"keyType":"AVMString","valueType":"AVMBytes","key":"bWFuYWdlcl9hZGRyZXNz"},"proposal_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvcG9zYWxfY291bnQ="},"anyone_can_create":{"keyType":"AVMString","valueType":"AVMUint64","key":"YW55b25lX2Nhbl9jcmVhdGU="}},"local":{},"box":{"proposal":{"keyType":"AVMString","valueType":"ProposalDataType","key":"X3A="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[336],"errorMessage":"Box must have value"},{"pc":[106,137,175],"errorMessage":"OnCompletion is not NoOp"},{"pc":[222],"errorMessage":"Only the manager can create proposals"},{"pc":[308],"errorMessage":"Proposal already exists"},{"pc":[350],"errorMessage":"The manager cannot vote on proposals"},{"pc":[333],"errorMessage":"The proposal the user is trying to vote on does not exist"},{"pc":[179],"errorMessage":"can only call when creating"},{"pc":[109,140],"errorMessage":"can only call when not creating"},{"pc":[211,218,294,348],"errorMessage":"check GlobalState exists"},{"pc":[128,166],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmBQgAAAAAAAAAAA9tYW5hZ2VyX2FkZHJlc3MOcHJvcG9zYWxfY291bnQRYW55b25lX2Nhbl9jcmVhdGUCX3AxG0EAHIIDBMtKv7UE7w/8aARrUJkHNhoAjgMARwAhAAIjQzEZFEQxGEQ2GgEXNhoCI1MxFiIJSTgQIhJEiAC7IkMxGRREMRhENhoBVwIANhoCVwIANhoDFzEWIglJOBAiEkSIACMiQzEZFEQxGBRENhoBI1OIAAIiQ4oBACkxAGcqI2cri/9niYoEACMrZURAAAgjKWVEMQASRDIHSYv+CIv8FRZXBgKL/FCL/RUWVwYCi/1QTwIWTwMWSwMVgTwIFlcGAoACADxMUE8CUExQKFAoUChQKFAoUE8CUExQIyplRCIISRYnBExQSb1FARREKk8CZ0m8SEy/iYoDAIv9FicETFBJvUUBREm+REmBFFsiCDEAIyllRBNEFksBTFwUTIEcW4v+CBZcHEsBvEi/iQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalTitle: string,
  proposalDescription: string,
  proposalExpiryTimestamp: bigint,
  proposalStartTimestamp: bigint,
  proposalTotalVotes: bigint,
  proposalYesVotes: bigint,
  proposalPrizePool: bigint,
  proposalAsset: bigint,
  votePrice: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(abiTuple: [string, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalDataType, APP_SPEC.structs) as ProposalDataType
}

/**
 * The argument types for the WeDao contract
 */
export type WeDaoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(bool)void': {
      anyoneCanCreate: boolean
    }
    'createProposal(string,string,uint64,pay)void': {
      proposalTitle: string
      proposalDescription: string
      expiresIn: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'voteProposal(uint64,bool,pay)void': {
      proposalId: bigint | number
      vote: boolean
      mbrTxn: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(bool)void': [anyoneCanCreate: boolean]
    'createProposal(string,string,uint64,pay)void': [proposalTitle: string, proposalDescription: string, expiresIn: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'voteProposal(uint64,bool,pay)void': [proposalId: bigint | number, vote: boolean, mbrTxn: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type WeDaoReturns = {
  'createApplication(bool)void': void
  'createProposal(string,string,uint64,pay)void': void
  'voteProposal(uint64,bool,pay)void': void
}

/**
 * Defines the types of available calls and state of the WeDao smart contract.
 */
export type WeDaoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(bool)void' | 'createApplication', {
      argsObj: WeDaoArgs['obj']['createApplication(bool)void']
      argsTuple: WeDaoArgs['tuple']['createApplication(bool)void']
      returns: WeDaoReturns['createApplication(bool)void']
    }>
    & Record<'createProposal(string,string,uint64,pay)void' | 'createProposal', {
      argsObj: WeDaoArgs['obj']['createProposal(string,string,uint64,pay)void']
      argsTuple: WeDaoArgs['tuple']['createProposal(string,string,uint64,pay)void']
      returns: WeDaoReturns['createProposal(string,string,uint64,pay)void']
    }>
    & Record<'voteProposal(uint64,bool,pay)void' | 'voteProposal', {
      argsObj: WeDaoArgs['obj']['voteProposal(uint64,bool,pay)void']
      argsTuple: WeDaoArgs['tuple']['voteProposal(uint64,bool,pay)void']
      returns: WeDaoReturns['voteProposal(uint64,bool,pay)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: BinaryState
        proposalCount: bigint
        anyoneCanCreate: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        proposal: ProposalDataType
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WeDaoSignatures = keyof WeDaoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WeDaoNonVoidMethodSignatures = keyof WeDaoTypes['methods'] extends infer T ? T extends keyof WeDaoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the WeDao smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WeDaoSignatures> = WeDaoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WeDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WeDaoSignatures> = WeDaoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WeDaoTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WeDaoTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WeDaoCreateCallParams =
  | Expand<CallParams<WeDaoArgs['obj']['createApplication(bool)void'] | WeDaoArgs['tuple']['createApplication(bool)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<WeDaoArgs['obj']['createApplication(bool)void'] | WeDaoArgs['tuple']['createApplication(bool)void']> & {method: 'createApplication(bool)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WeDaoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WeDaoCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WeDao smart contract
 */
export abstract class WeDaoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends WeDaoCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(bool)void':
            return WeDaoParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the WeDao smart contract using the createApplication(bool)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<WeDaoArgs['obj']['createApplication(bool)void'] | WeDaoArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(bool)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.anyoneCanCreate],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createProposal(string,string,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(params: CallParams<WeDaoArgs['obj']['createProposal(string,string,uint64,pay)void'] | WeDaoArgs['tuple']['createProposal(string,string,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createProposal(string,string,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalTitle, params.args.proposalDescription, params.args.expiresIn, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the voteProposal(uint64,bool,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteProposal(params: CallParams<WeDaoArgs['obj']['voteProposal(uint64,bool,pay)void'] | WeDaoArgs['tuple']['voteProposal(uint64,bool,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'voteProposal(uint64,bool,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.vote, params.args.mbrTxn],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the WeDao smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WeDaoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WeDaoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WeDaoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WeDaoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the WeDao smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WeDaoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? WeDaoParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (WeDaoCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new WeDaoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeDao smart contract using the createApplication(bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<WeDaoArgs['obj']['createApplication(bool)void'] | WeDaoArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(WeDaoParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeDao smart contract using the createApplication(bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<WeDaoArgs['obj']['createApplication(bool)void'] | WeDaoArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(WeDaoParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeDao smart contract using an ABI method call using the createApplication(bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<WeDaoArgs['obj']['createApplication(bool)void'] | WeDaoArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(WeDaoParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | WeDaoReturns['createApplication(bool)void']) }, appClient: new WeDaoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the WeDao smart contract
 */
export class WeDaoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WeDaoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WeDao app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WeDaoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WeDaoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WeDaoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WeDaoClient> {
    return new WeDaoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WeDaoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WeDaoClient> {
    return new WeDaoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the WeDao smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the WeDao smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createProposal: (params: CallParams<WeDaoArgs['obj']['createProposal(string,string,uint64,pay)void'] | WeDaoArgs['tuple']['createProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeDaoParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the WeDao smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteProposal: (params: CallParams<WeDaoArgs['obj']['voteProposal(uint64,bool,pay)void'] | WeDaoArgs['tuple']['voteProposal(uint64,bool,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeDaoParamsFactory.voteProposal(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the WeDao smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the WeDao smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createProposal: (params: CallParams<WeDaoArgs['obj']['createProposal(string,string,uint64,pay)void'] | WeDaoArgs['tuple']['createProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeDaoParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the WeDao smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteProposal: (params: CallParams<WeDaoArgs['obj']['voteProposal(uint64,bool,pay)void'] | WeDaoArgs['tuple']['voteProposal(uint64,bool,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeDaoParamsFactory.voteProposal(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the WeDao smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the WeDao smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createProposal: async (params: CallParams<WeDaoArgs['obj']['createProposal(string,string,uint64,pay)void'] | WeDaoArgs['tuple']['createProposal(string,string,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeDaoParamsFactory.createProposal(params))
      return {...result, return: result.return as unknown as (undefined | WeDaoReturns['createProposal(string,string,uint64,pay)void'])}
    },

    /**
     * Makes a call to the WeDao smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteProposal: async (params: CallParams<WeDaoArgs['obj']['voteProposal(uint64,bool,pay)void'] | WeDaoArgs['tuple']['voteProposal(uint64,bool,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeDaoParamsFactory.voteProposal(params))
      return {...result, return: result.return as unknown as (undefined | WeDaoReturns['voteProposal(uint64,bool,pay)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WeDaoClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current WeDao app
   */
  state = {
    /**
     * Methods to access global state for the current WeDao app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          managerAddress: new BinaryStateValue(result.manager_address),
          proposalCount: result.proposal_count,
          anyoneCanCreate: result.anyone_can_create,
        }
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the proposal_count key in global state
       */
      proposalCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposal_count")) as bigint | undefined },
      /**
       * Get the current value of the anyone_can_create key in global state
       */
      anyoneCanCreate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("anyone_can_create")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current WeDao app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          proposal: result.proposal,
        }
      },
      /**
       * Get the current value of the proposal key in box state
       */
      proposal: async (): Promise<ProposalDataType | undefined> => { return (await this.appClient.state.box.getValue("proposal")) as ProposalDataType | undefined },
    },
  }

  public newGroup(): WeDaoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createProposal(string,string,uint64,pay)void method call against the WeDao contract
       */
      createProposal(params: CallParams<WeDaoArgs['obj']['createProposal(string,string,uint64,pay)void'] | WeDaoArgs['tuple']['createProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a voteProposal(uint64,bool,pay)void method call against the WeDao contract
       */
      voteProposal(params: CallParams<WeDaoArgs['obj']['voteProposal(uint64,bool,pay)void'] | WeDaoArgs['tuple']['voteProposal(uint64,bool,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the WeDao contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WeDaoComposer
  }
}
export type WeDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createProposal(string,string,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(params?: CallParams<WeDaoArgs['obj']['createProposal(string,string,uint64,pay)void'] | WeDaoArgs['tuple']['createProposal(string,string,uint64,pay)void']>): WeDaoComposer<[...TReturns, WeDaoReturns['createProposal(string,string,uint64,pay)void'] | undefined]>

  /**
   * Calls the voteProposal(uint64,bool,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteProposal(params?: CallParams<WeDaoArgs['obj']['voteProposal(uint64,bool,pay)void'] | WeDaoArgs['tuple']['voteProposal(uint64,bool,pay)void']>): WeDaoComposer<[...TReturns, WeDaoReturns['voteProposal(uint64,bool,pay)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the WeDao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WeDaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WeDaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WeDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WeDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WeDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WeDaoComposerResults<TReturns>>
}
export type WeDaoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

