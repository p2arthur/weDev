/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from "@algorandfoundation/algokit-utils/types/algorand-client";
import {
  ABIReturn,
  AppReturn,
  SendAppTransactionResult,
} from "@algorandfoundation/algokit-utils/types/app";
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from "@algorandfoundation/algokit-utils/types/app-arc56";
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from "@algorandfoundation/algokit-utils/types/app-client";
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from "@algorandfoundation/algokit-utils/types/app-factory";
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from "@algorandfoundation/algokit-utils/types/composer";
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from "@algorandfoundation/algokit-utils/types/transaction";
import {
  Address,
  encodeAddress,
  modelsv2,
  OnApplicationComplete,
  Transaction,
  TransactionSigner,
} from "algosdk";
import SimulateResponse = modelsv2.SimulateResponse;

export const APP_SPEC: Arc56Contract = {
  name: "YesNoDao",
  structs: {
    ProposalDataType: [
      { name: "proposalExpiryTimestamp", type: "uint64" },
      { name: "proposalStartTimestamp", type: "uint64" },
      { name: "proposalTotalVotes", type: "uint64" },
      { name: "proposalYesVotes", type: "uint64" },
      { name: "proposalCreator", type: "address" },
      { name: "proposalTitleAndDescription", type: "string" },
    ],
    VoteDataType: [{ name: "voteTimestamp", type: "uint64" }],
  },
  methods: [
    {
      name: "createApplication",
      args: [
        { type: "bool", name: "anyone_can_create" },
        { type: "uint64", name: "minimum_holding" },
        { type: "uint64", name: "asset_id" },
        { type: "string", name: "projectTitle" },
        { type: "string", name: "projectDescription" },
      ],
      returns: { type: "void" },
      actions: { create: ["NoOp"], call: [] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "configureContract",
      args: [
        { type: "bool", name: "anyone_can_create" },
        { type: "uint64", name: "minimum_holding" },
        { type: "uint64", name: "assetId" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "createProposal",
      args: [
        { type: "string", name: "proposal_title" },
        { type: "string", name: "proposal_description" },
        { type: "uint64", name: "expires_in" },
        { type: "pay", name: "mbr_txn" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "voteProposal",
      args: [
        { type: "uint64", name: "proposal_id" },
        { type: "bool", name: "vote" },
        { type: "pay", name: "mbr_txn" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "hasVoted",
      args: [
        { type: "uint64", name: "proposal_id" },
        { type: "account", name: "voter" },
      ],
      returns: { type: "bool" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getProposal",
      args: [{ type: "uint64", name: "proposal_id" }],
      returns: {
        type: "(uint64,uint64,uint64,uint64,address,string)",
        struct: "ProposalDataType",
      },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
  ],
  arcs: [22, 28],
  networks: {},
  state: {
    schema: { global: { ints: 4, bytes: 2 }, local: { ints: 0, bytes: 0 } },
    keys: {
      global: {
        manager_address: {
          keyType: "AVMString",
          valueType: "AVMBytes",
          key: "bWFuYWdlcl9hZGRyZXNz",
        },
        proposal_count: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "cHJvcG9zYWxfY291bnQ=",
        },
        anyone_can_create: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "YW55b25lX2Nhbl9jcmVhdGU=",
        },
        asset_id: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "YXNzZXRfaWQ=",
        },
        minimum_holding: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "bWluaW11bV9ob2xkaW5n",
        },
        project_name: {
          keyType: "AVMString",
          valueType: "AVMString",
          key: "cHJvamVjdF9uYW1l",
        },
      },
      local: {},
      box: {
        proposal: {
          keyType: "AVMString",
          valueType: "ProposalDataType",
          key: "X3A=",
        },
        vote: { keyType: "AVMString", valueType: "VoteDataType", key: "X3Y=" },
      },
    },
    maps: { global: {}, local: {}, box: {} },
  },
  bareActions: { create: [], call: [] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        { pc: [608, 722], errorMessage: "Box must have value" },
        {
          pc: [163, 184, 218, 249, 287, 312],
          errorMessage: "OnCompletion is not NoOp",
        },
        {
          pc: [448],
          errorMessage: "Only the manager can configure the contract",
        },
        { pc: [480], errorMessage: "Only the manager can create proposals" },
        { pc: [497, 641], errorMessage: "Payment must be to the contract" },
        { pc: [489], errorMessage: "Payment must cover the box MBR" },
        { pc: [633], errorMessage: "Payment must cover the vote box MBR" },
        { pc: [562], errorMessage: "Proposal already exists" },
        { pc: [626], errorMessage: "The manager cannot vote on proposals" },
        { pc: [618], errorMessage: "The proposal has expired" },
        {
          pc: [588],
          errorMessage:
            "The proposal the user is trying to vote on does not exist",
        },
        {
          pc: [657],
          errorMessage: "The user does not have enough asset to vote",
        },
        {
          pc: [604],
          errorMessage: "The user has already voted on this proposal",
        },
        { pc: [316], errorMessage: "can only call when creating" },
        {
          pc: [166, 187, 221, 252, 290],
          errorMessage: "can only call when not creating",
        },
        {
          pc: [444, 469, 476, 548, 624, 648, 655],
          errorMessage: "check GlobalState exists",
        },
        { pc: [240, 278], errorMessage: "transaction type is pay" },
      ],
      pcOffsetMethod: "none",
    },
    clear: { sourceInfo: [], pcOffsetMethod: "none" },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  byteCode: {
    approval:
      "CiADAAHqgAEmCQ9tYW5hZ2VyX2FkZHJlc3MOcHJvcG9zYWxfY291bnQRYW55b25lX2Nhbl9jcmVhdGUPbWluaW11bV9ob2xkaW5nCGFzc2V0X2lkAl9wBBUffHUIAAAAAAAAAAACX3YxG0EAMYIGBAfyihEEIbid3gTvD/xoBGtQmQcEl9XOzQT4Ev09NhoAjgYAlwB+AFgAOQAXAAIiQzEZFEQxGEQ2GgEXiAIZJwZMULAjQzEZFEQxGEQ2GgEXNhoCF8AciAHtgAEAIk8CVCcGTFCwI0MxGRREMRhENhoBFzYaAiJTMRYjCUk4ECMSRIgBSSNDMRkURDEYRDYaAVcCADYaAlcCADYaAxcxFiMJSTgQIxJEiAC1I0MxGRREMRhENhoBIlM2GgIXNhoDF4gAgyNDMRkURDEYFEQ2GgEiUzYaAhc2GgMXNhoEVwIANhoFVwIAiAACI0OKBQAoMQBnKSJnKov7ZyuL/GcnBIv9Z4AMcHJvamVjdF9uYW1li/5nsYv+FRZXBgKL/lCL/xUWVwYCi/9QgATrA8knshpMshqyGoG6ocffArIYgQayECKyAbOJigMAIihlRDEAEkQqi/1nK4v+ZycEi/9niYoEACIqZURAAAgiKGVEMQASRDIHi/84CCQPRIv/OAcyChJESYv+CBZMFjEAi/yAATpQi/1QSRUWVwYCTFBPA08DUCcHUCcHUE8CUIACAEJQTFAiKWVEIwhJFicFTFBJvUUBFEQpTwJnSbxITL+JigMAi/0WJwVLAVBJvUUBRDEATwJMUCcITFBJvUUBFERLAb5EMgdLASJbSwENRDEAIihlRBNEi/84CCQPRIv/OAcyChJEMQAiJwRlRHAASCIrZUQPRBZLAYEQWyMISwKBGFuL/ghMFk8DTFwQTBZcGE4Cv0sBvEi/iYoCAYv+Fov/UCcITFC9RQGJigEBi/8WJwVMUL5EiQ==",
    clear: "CoEBQw==",
  },
  compilerInfo: {
    compiler: "puya",
    compilerVersion: { major: 4, minor: 5, patch: 3 },
  },
  events: [],
  templateVariables: {},
} as unknown as Arc56Contract;

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined;
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined;
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value;
  }

  asString(): string | undefined {
    return this.value !== undefined
      ? Buffer.from(this.value).toString("utf-8")
      : undefined;
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
  ? { [K in keyof O]: O[K] }
  : never;

// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalExpiryTimestamp: bigint;
  proposalStartTimestamp: bigint;
  proposalTotalVotes: bigint;
  proposalYesVotes: bigint;
  proposalCreator: string;
  proposalTitleAndDescription: string;
};

/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(
  abiTuple: [bigint, bigint, bigint, bigint, string, string]
) {
  return getABIStructFromABITuple(
    abiTuple,
    APP_SPEC.structs.ProposalDataType,
    APP_SPEC.structs
  ) as ProposalDataType;
}

export type VoteDataType = {
  voteTimestamp: bigint;
};

/**
 * Converts the ABI tuple representation of a VoteDataType to the struct representation
 */
export function VoteDataTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(
    abiTuple,
    APP_SPEC.structs.VoteDataType,
    APP_SPEC.structs
  ) as VoteDataType;
}

/**
 * The argument types for the YesNoDao contract
 */
export type YesNoDaoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    "createApplication(bool,uint64,uint64,string,string)void": {
      anyoneCanCreate: boolean;
      minimumHolding: bigint | number;
      assetId: bigint | number;
      projectTitle: string;
      projectDescription: string;
    };
    "configureContract(bool,uint64,uint64)void": {
      anyoneCanCreate: boolean;
      minimumHolding: bigint | number;
      assetId: bigint | number;
    };
    "createProposal(string,string,uint64,pay)void": {
      proposalTitle: string;
      proposalDescription: string;
      expiresIn: bigint | number;
      mbrTxn: AppMethodCallTransactionArgument;
    };
    "voteProposal(uint64,bool,pay)void": {
      proposalId: bigint | number;
      vote: boolean;
      mbrTxn: AppMethodCallTransactionArgument;
    };
    "hasVoted(uint64,account)bool": {
      proposalId: bigint | number;
      voter: Uint8Array | string;
    };
    "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)": {
      proposalId: bigint | number;
    };
  };
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    "createApplication(bool,uint64,uint64,string,string)void": [
      anyoneCanCreate: boolean,
      minimumHolding: bigint | number,
      assetId: bigint | number,
      projectTitle: string,
      projectDescription: string
    ];
    "configureContract(bool,uint64,uint64)void": [
      anyoneCanCreate: boolean,
      minimumHolding: bigint | number,
      assetId: bigint | number
    ];
    "createProposal(string,string,uint64,pay)void": [
      proposalTitle: string,
      proposalDescription: string,
      expiresIn: bigint | number,
      mbrTxn: AppMethodCallTransactionArgument
    ];
    "voteProposal(uint64,bool,pay)void": [
      proposalId: bigint | number,
      vote: boolean,
      mbrTxn: AppMethodCallTransactionArgument
    ];
    "hasVoted(uint64,account)bool": [
      proposalId: bigint | number,
      voter: Uint8Array | string
    ];
    "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)": [
      proposalId: bigint | number
    ];
  };
};

/**
 * The return type for each method
 */
export type YesNoDaoReturns = {
  "createApplication(bool,uint64,uint64,string,string)void": void;
  "configureContract(bool,uint64,uint64)void": void;
  "createProposal(string,string,uint64,pay)void": void;
  "voteProposal(uint64,bool,pay)void": void;
  "hasVoted(uint64,account)bool": boolean;
  "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)": ProposalDataType;
};

/**
 * Defines the types of available calls and state of the YesNoDao smart contract.
 */
export type YesNoDaoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    | "createApplication(bool,uint64,uint64,string,string)void"
    | "createApplication",
    {
      argsObj: YesNoDaoArgs["obj"]["createApplication(bool,uint64,uint64,string,string)void"];
      argsTuple: YesNoDaoArgs["tuple"]["createApplication(bool,uint64,uint64,string,string)void"];
      returns: YesNoDaoReturns["createApplication(bool,uint64,uint64,string,string)void"];
    }
  > &
    Record<
      "configureContract(bool,uint64,uint64)void" | "configureContract",
      {
        argsObj: YesNoDaoArgs["obj"]["configureContract(bool,uint64,uint64)void"];
        argsTuple: YesNoDaoArgs["tuple"]["configureContract(bool,uint64,uint64)void"];
        returns: YesNoDaoReturns["configureContract(bool,uint64,uint64)void"];
      }
    > &
    Record<
      "createProposal(string,string,uint64,pay)void" | "createProposal",
      {
        argsObj: YesNoDaoArgs["obj"]["createProposal(string,string,uint64,pay)void"];
        argsTuple: YesNoDaoArgs["tuple"]["createProposal(string,string,uint64,pay)void"];
        returns: YesNoDaoReturns["createProposal(string,string,uint64,pay)void"];
      }
    > &
    Record<
      "voteProposal(uint64,bool,pay)void" | "voteProposal",
      {
        argsObj: YesNoDaoArgs["obj"]["voteProposal(uint64,bool,pay)void"];
        argsTuple: YesNoDaoArgs["tuple"]["voteProposal(uint64,bool,pay)void"];
        returns: YesNoDaoReturns["voteProposal(uint64,bool,pay)void"];
      }
    > &
    Record<
      "hasVoted(uint64,account)bool" | "hasVoted",
      {
        argsObj: YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"];
        argsTuple: YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"];
        returns: YesNoDaoReturns["hasVoted(uint64,account)bool"];
      }
    > &
    Record<
      | "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"
      | "getProposal",
      {
        argsObj: YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"];
        argsTuple: YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"];
        returns: YesNoDaoReturns["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"];
      }
    >;
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: BinaryState;
        proposalCount: bigint;
        anyoneCanCreate: bigint;
        assetId: bigint;
        minimumHolding: bigint;
        projectName: string;
      };
      maps: {};
    };
    box: {
      keys: {
        proposal: ProposalDataType;
        vote: VoteDataType;
      };
      maps: {};
    };
  };
};

/**
 * Defines the possible abi call signatures.
 */
export type YesNoDaoSignatures = keyof YesNoDaoTypes["methods"];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type YesNoDaoNonVoidMethodSignatures =
  keyof YesNoDaoTypes["methods"] extends infer T
    ? T extends keyof YesNoDaoTypes["methods"]
      ? MethodReturn<T> extends void
        ? never
        : T
      : never
    : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, "method" | "args" | "onComplete"> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
  }
>;
/**
 * Maps a method signature from the YesNoDao smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends YesNoDaoSignatures> =
  YesNoDaoTypes["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the YesNoDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends YesNoDaoSignatures> =
  YesNoDaoTypes["methods"][TSignature]["returns"];

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = YesNoDaoTypes["state"]["global"]["keys"];

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = YesNoDaoTypes["state"]["box"]["keys"];

/**
 * Defines supported create method params for this smart contract
 */
export type YesNoDaoCreateCallParams =
  | Expand<
      CallParams<
        | YesNoDaoArgs["obj"]["createApplication(bool,uint64,uint64,string,string)void"]
        | YesNoDaoArgs["tuple"]["createApplication(bool,uint64,uint64,string,string)void"]
      > & { method: "createApplication" } & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } & CreateSchema
    >
  | Expand<
      CallParams<
        | YesNoDaoArgs["obj"]["createApplication(bool,uint64,uint64,string,string)void"]
        | YesNoDaoArgs["tuple"]["createApplication(bool,uint64,uint64,string,string)void"]
      > & {
        method: "createApplication(bool,uint64,uint64,string,string)void";
      } & { onComplete?: OnApplicationComplete.NoOpOC } & CreateSchema
    >;
/**
 * Defines arguments required for the deploy method.
 */
export type YesNoDaoDeployParams = Expand<
  Omit<
    AppFactoryDeployParams,
    "createParams" | "updateParams" | "deleteParams"
  > & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: YesNoDaoCreateCallParams;
  }
>;

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the YesNoDao smart contract
 */
export abstract class YesNoDaoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<
        TParams extends YesNoDaoCreateCallParams & { method: string }
      >(params: TParams) {
        switch (params.method) {
          case "createApplication":
          case "createApplication(bool,uint64,uint64,string,string)void":
            return YesNoDaoParamsFactory.create.createApplication(params);
        }
        throw new Error(`Unknown ' + verb + ' method`);
      },

      /**
       * Constructs create ABI call params for the YesNoDao smart contract using the createApplication(bool,uint64,uint64,string,string)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(
        params: CallParams<
          | YesNoDaoArgs["obj"]["createApplication(bool,uint64,uint64,string,string)void"]
          | YesNoDaoArgs["tuple"]["createApplication(bool,uint64,uint64,string,string)void"]
        > &
          AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
          }
      ): AppClientMethodCallParams &
        AppClientCompilationParams & {
          onComplete?: OnApplicationComplete.NoOpOC;
        } {
        return {
          ...params,
          method:
            "createApplication(bool,uint64,uint64,string,string)void" as const,
          args: Array.isArray(params.args)
            ? params.args
            : [
                params.args.anyoneCanCreate,
                params.args.minimumHolding,
                params.args.assetId,
                params.args.projectTitle,
                params.args.projectDescription,
              ],
        };
      },
    };
  }

  /**
   * Constructs a no op call for the configureContract(bool,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static configureContract(
    params: CallParams<
      | YesNoDaoArgs["obj"]["configureContract(bool,uint64,uint64)void"]
      | YesNoDaoArgs["tuple"]["configureContract(bool,uint64,uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "configureContract(bool,uint64,uint64)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.anyoneCanCreate,
            params.args.minimumHolding,
            params.args.assetId,
          ],
    };
  }
  /**
   * Constructs a no op call for the createProposal(string,string,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(
    params: CallParams<
      | YesNoDaoArgs["obj"]["createProposal(string,string,uint64,pay)void"]
      | YesNoDaoArgs["tuple"]["createProposal(string,string,uint64,pay)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "createProposal(string,string,uint64,pay)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.proposalTitle,
            params.args.proposalDescription,
            params.args.expiresIn,
            params.args.mbrTxn,
          ],
    };
  }
  /**
   * Constructs a no op call for the voteProposal(uint64,bool,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteProposal(
    params: CallParams<
      | YesNoDaoArgs["obj"]["voteProposal(uint64,bool,pay)void"]
      | YesNoDaoArgs["tuple"]["voteProposal(uint64,bool,pay)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "voteProposal(uint64,bool,pay)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.proposalId, params.args.vote, params.args.mbrTxn],
    };
  }
  /**
   * Constructs a no op call for the hasVoted(uint64,account)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasVoted(
    params: CallParams<
      | YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"]
      | YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "hasVoted(uint64,account)bool" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.proposalId, params.args.voter],
    };
  }
  /**
   * Constructs a no op call for the getProposal(uint64)(uint64,uint64,uint64,uint64,address,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposal(
    params: CallParams<
      | YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
      | YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method:
        "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    };
  }
}

/**
 * A factory to create and deploy one or more instance of the YesNoDao smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class YesNoDaoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory;

  /**
   * Creates a new instance of `YesNoDaoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, "appSpec">) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    });
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName;
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC;
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand;
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new YesNoDaoClient(this.appFactory.getAppClientById(params));
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams
  ) {
    return new YesNoDaoClient(
      await this.appFactory.getAppClientByCreatorAndName(params)
    );
  }

  /**
   * Idempotently deploys the YesNoDao smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: YesNoDaoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method
        ? YesNoDaoParamsFactory.create._resolveByMethod(params.createParams)
        : params.createParams
        ? (params.createParams as YesNoDaoCreateCallParams & {
            args: Uint8Array[];
          })
        : undefined,
    });
    return {
      result: result.result,
      appClient: new YesNoDaoClient(result.appClient),
    };
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YesNoDao smart contract using the createApplication(bool,uint64,uint64,string,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (
        params: CallParams<
          | YesNoDaoArgs["obj"]["createApplication(bool,uint64,uint64,string,string)void"]
          | YesNoDaoArgs["tuple"]["createApplication(bool,uint64,uint64,string,string)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.params.create(
          YesNoDaoParamsFactory.create.createApplication(params)
        );
      },
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YesNoDao smart contract using the createApplication(bool,uint64,uint64,string,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (
        params: CallParams<
          | YesNoDaoArgs["obj"]["createApplication(bool,uint64,uint64,string,string)void"]
          | YesNoDaoArgs["tuple"]["createApplication(bool,uint64,uint64,string,string)void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        return this.appFactory.createTransaction.create(
          YesNoDaoParamsFactory.create.createApplication(params)
        );
      },
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YesNoDao smart contract using an ABI method call using the createApplication(bool,uint64,uint64,string,string)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (
        params: CallParams<
          | YesNoDaoArgs["obj"]["createApplication(bool,uint64,uint64,string,string)void"]
          | YesNoDaoArgs["tuple"]["createApplication(bool,uint64,uint64,string,string)void"]
        > &
          AppClientCompilationParams &
          CreateSchema &
          SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
      ) => {
        const result = await this.appFactory.send.create(
          YesNoDaoParamsFactory.create.createApplication(params)
        );
        return {
          result: {
            ...result.result,
            return: result.result.return as unknown as
              | undefined
              | YesNoDaoReturns["createApplication(bool,uint64,uint64,string,string)void"],
          },
          appClient: new YesNoDaoClient(result.appClient),
        };
      },
    },
  };
}
/**
 * A client to make calls to the YesNoDao smart contract
 */
export class YesNoDaoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient;

  /**
   * Creates a new instance of `YesNoDaoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the YesNoDao app spec
   */
  constructor(appClient: _AppClient);
  /**
   * Creates a new instance of `YesNoDaoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, "appSpec">);
  constructor(
    appClientOrParams: _AppClient | Omit<AppClientParams, "appSpec">
  ) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          });
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends YesNoDaoNonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs
        )
      : undefined;
  }

  /**
   * Returns a new `YesNoDaoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, "appSpec">
  ): Promise<YesNoDaoClient> {
    return new YesNoDaoClient(
      await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC })
    );
  }

  /**
   * Returns an `YesNoDaoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, "appSpec">
  ): Promise<YesNoDaoClient> {
    return new YesNoDaoClient(
      await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC })
    );
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId;
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress;
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName;
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec;
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand;
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the YesNoDao smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params);
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `configureContract(bool,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    configureContract: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["configureContract(bool,uint64,uint64)void"]
        | YesNoDaoArgs["tuple"]["configureContract(bool,uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        YesNoDaoParamsFactory.configureContract(params)
      );
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createProposal: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["createProposal(string,string,uint64,pay)void"]
        | YesNoDaoArgs["tuple"]["createProposal(string,string,uint64,pay)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        YesNoDaoParamsFactory.createProposal(params)
      );
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteProposal: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["voteProposal(uint64,bool,pay)void"]
        | YesNoDaoArgs["tuple"]["voteProposal(uint64,bool,pay)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        YesNoDaoParamsFactory.voteProposal(params)
      );
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `hasVoted(uint64,account)bool` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasVoted: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"]
        | YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(YesNoDaoParamsFactory.hasVoted(params));
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProposal: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
        | YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        YesNoDaoParamsFactory.getProposal(params)
      );
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the YesNoDao smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params);
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `configureContract(bool,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    configureContract: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["configureContract(bool,uint64,uint64)void"]
        | YesNoDaoArgs["tuple"]["configureContract(bool,uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        YesNoDaoParamsFactory.configureContract(params)
      );
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createProposal: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["createProposal(string,string,uint64,pay)void"]
        | YesNoDaoArgs["tuple"]["createProposal(string,string,uint64,pay)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        YesNoDaoParamsFactory.createProposal(params)
      );
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteProposal: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["voteProposal(uint64,bool,pay)void"]
        | YesNoDaoArgs["tuple"]["voteProposal(uint64,bool,pay)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        YesNoDaoParamsFactory.voteProposal(params)
      );
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `hasVoted(uint64,account)bool` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasVoted: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"]
        | YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        YesNoDaoParamsFactory.hasVoted(params)
      );
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProposal: (
      params: CallParams<
        | YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
        | YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        YesNoDaoParamsFactory.getProposal(params)
      );
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the YesNoDao smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params);
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `configureContract(bool,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    configureContract: async (
      params: CallParams<
        | YesNoDaoArgs["obj"]["configureContract(bool,uint64,uint64)void"]
        | YesNoDaoArgs["tuple"]["configureContract(bool,uint64,uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        YesNoDaoParamsFactory.configureContract(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | YesNoDaoReturns["configureContract(bool,uint64,uint64)void"],
      };
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createProposal: async (
      params: CallParams<
        | YesNoDaoArgs["obj"]["createProposal(string,string,uint64,pay)void"]
        | YesNoDaoArgs["tuple"]["createProposal(string,string,uint64,pay)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        YesNoDaoParamsFactory.createProposal(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | YesNoDaoReturns["createProposal(string,string,uint64,pay)void"],
      };
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteProposal: async (
      params: CallParams<
        | YesNoDaoArgs["obj"]["voteProposal(uint64,bool,pay)void"]
        | YesNoDaoArgs["tuple"]["voteProposal(uint64,bool,pay)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        YesNoDaoParamsFactory.voteProposal(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | YesNoDaoReturns["voteProposal(uint64,bool,pay)void"],
      };
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `hasVoted(uint64,account)bool` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasVoted: async (
      params: CallParams<
        | YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"]
        | YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        YesNoDaoParamsFactory.hasVoted(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | YesNoDaoReturns["hasVoted(uint64,account)bool"],
      };
    },

    /**
     * Makes a call to the YesNoDao smart contract using the `getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProposal: async (
      params: CallParams<
        | YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
        | YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        YesNoDaoParamsFactory.getProposal(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | YesNoDaoReturns["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"],
      };
    },
  };

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new YesNoDaoClient(this.appClient.clone(params));
  }

  /**
   * Makes a readonly (simulated) call to the YesNoDao smart contract using the `hasVoted(uint64,account)bool` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async hasVoted(
    params: CallParams<
      | YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"]
      | YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"]
    >
  ) {
    const result = await this.appClient.send.call(
      YesNoDaoParamsFactory.hasVoted(params)
    );
    return result.return as unknown as YesNoDaoReturns["hasVoted(uint64,account)bool"];
  }

  /**
   * Makes a readonly (simulated) call to the YesNoDao smart contract using the `getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getProposal(
    params: CallParams<
      | YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
      | YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
    >
  ) {
    const result = await this.appClient.send.call(
      YesNoDaoParamsFactory.getProposal(params)
    );
    return result.return as unknown as YesNoDaoReturns["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"];
  }

  /**
   * Methods to access state for the current YesNoDao app
   */
  state = {
    /**
     * Methods to access global state for the current YesNoDao app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll();
        return {
          managerAddress: new BinaryStateValue(result.manager_address),
          proposalCount: result.proposal_count,
          anyoneCanCreate: result.anyone_can_create,
          assetId: result.asset_id,
          minimumHolding: result.minimum_holding,
          projectName: result.project_name,
        };
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<BinaryState> => {
        return new BinaryStateValue(
          (await this.appClient.state.global.getValue("manager_address")) as
            | Uint8Array
            | undefined
        );
      },
      /**
       * Get the current value of the proposal_count key in global state
       */
      proposalCount: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue(
          "proposal_count"
        )) as bigint | undefined;
      },
      /**
       * Get the current value of the anyone_can_create key in global state
       */
      anyoneCanCreate: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue(
          "anyone_can_create"
        )) as bigint | undefined;
      },
      /**
       * Get the current value of the asset_id key in global state
       */
      assetId: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue("asset_id")) as
          | bigint
          | undefined;
      },
      /**
       * Get the current value of the minimum_holding key in global state
       */
      minimumHolding: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue(
          "minimum_holding"
        )) as bigint | undefined;
      },
      /**
       * Get the current value of the project_name key in global state
       */
      projectName: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue("project_name")) as
          | string
          | undefined;
      },
    },
    /**
     * Methods to access box state for the current YesNoDao app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll();
        return {
          proposal: result.proposal,
          vote: result.vote,
        };
      },
      /**
       * Get the current value of the proposal key in box state
       */
      proposal: async (): Promise<ProposalDataType | undefined> => {
        return (await this.appClient.state.box.getValue("proposal")) as
          | ProposalDataType
          | undefined;
      },
      /**
       * Get the current value of the vote key in box state
       */
      vote: async (): Promise<VoteDataType | undefined> => {
        return (await this.appClient.state.box.getValue("vote")) as
          | VoteDataType
          | undefined;
      },
    },
  };

  public newGroup(): YesNoDaoComposer {
    const client = this;
    const composer = this.algorand.newGroup();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<
      undefined | ((x: ABIReturn | undefined) => any)
    > = [];
    return {
      /**
       * Add a configureContract(bool,uint64,uint64)void method call against the YesNoDao contract
       */
      configureContract(
        params: CallParams<
          | YesNoDaoArgs["obj"]["configureContract(bool,uint64,uint64)void"]
          | YesNoDaoArgs["tuple"]["configureContract(bool,uint64,uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.configureContract(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a createProposal(string,string,uint64,pay)void method call against the YesNoDao contract
       */
      createProposal(
        params: CallParams<
          | YesNoDaoArgs["obj"]["createProposal(string,string,uint64,pay)void"]
          | YesNoDaoArgs["tuple"]["createProposal(string,string,uint64,pay)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.createProposal(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a voteProposal(uint64,bool,pay)void method call against the YesNoDao contract
       */
      voteProposal(
        params: CallParams<
          | YesNoDaoArgs["obj"]["voteProposal(uint64,bool,pay)void"]
          | YesNoDaoArgs["tuple"]["voteProposal(uint64,bool,pay)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.voteProposal(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a hasVoted(uint64,account)bool method call against the YesNoDao contract
       */
      hasVoted(
        params: CallParams<
          | YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"]
          | YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.hasVoted(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("hasVoted(uint64,account)bool", v)
        );
        return this;
      },
      /**
       * Add a getProposal(uint64)(uint64,uint64,uint64,uint64,address,string) method call against the YesNoDao contract
       */
      getProposal(
        params: CallParams<
          | YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
          | YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(await client.params.getProposal(params))
        );
        resultMappers.push((v) =>
          client.decodeReturnValue(
            "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)",
            v
          )
        );
        return this;
      },
      /**
       * Add a clear state call to the YesNoDao contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() =>
          composer.addAppCall(client.params.clearState(params))
        );
        return this;
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() =>
          composer.addTransaction(txn, signer)
        );
        return this;
      },
      async composer() {
        await promiseChain;
        return composer;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await (!options
          ? composer.simulate()
          : composer.simulate(options));
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val)
              : val.returnValue
          ),
        };
      },
      async send(params?: SendParams) {
        await promiseChain;
        const result = await composer.send(params);
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val)
              : val.returnValue
          ),
        };
      },
    } as unknown as YesNoDaoComposer;
  }
}
export type YesNoDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the configureContract(bool,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configureContract(
    params?: CallParams<
      | YesNoDaoArgs["obj"]["configureContract(bool,uint64,uint64)void"]
      | YesNoDaoArgs["tuple"]["configureContract(bool,uint64,uint64)void"]
    >
  ): YesNoDaoComposer<
    [
      ...TReturns,
      YesNoDaoReturns["configureContract(bool,uint64,uint64)void"] | undefined
    ]
  >;

  /**
   * Calls the createProposal(string,string,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(
    params?: CallParams<
      | YesNoDaoArgs["obj"]["createProposal(string,string,uint64,pay)void"]
      | YesNoDaoArgs["tuple"]["createProposal(string,string,uint64,pay)void"]
    >
  ): YesNoDaoComposer<
    [
      ...TReturns,
      (
        | YesNoDaoReturns["createProposal(string,string,uint64,pay)void"]
        | undefined
      )
    ]
  >;

  /**
   * Calls the voteProposal(uint64,bool,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteProposal(
    params?: CallParams<
      | YesNoDaoArgs["obj"]["voteProposal(uint64,bool,pay)void"]
      | YesNoDaoArgs["tuple"]["voteProposal(uint64,bool,pay)void"]
    >
  ): YesNoDaoComposer<
    [
      ...TReturns,
      YesNoDaoReturns["voteProposal(uint64,bool,pay)void"] | undefined
    ]
  >;

  /**
   * Calls the hasVoted(uint64,account)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasVoted(
    params?: CallParams<
      | YesNoDaoArgs["obj"]["hasVoted(uint64,account)bool"]
      | YesNoDaoArgs["tuple"]["hasVoted(uint64,account)bool"]
    >
  ): YesNoDaoComposer<
    [...TReturns, YesNoDaoReturns["hasVoted(uint64,account)bool"] | undefined]
  >;

  /**
   * Calls the getProposal(uint64)(uint64,uint64,uint64,uint64,address,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposal(
    params?: CallParams<
      | YesNoDaoArgs["obj"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
      | YesNoDaoArgs["tuple"]["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
    >
  ): YesNoDaoComposer<
    [
      ...TReturns,
      (
        | YesNoDaoReturns["getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"]
        | undefined
      )
    ]
  >;

  /**
   * Makes a clear_state call to an existing instance of the YesNoDao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    params?: AppClientBareCallParams
  ): YesNoDaoComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(
    txn: Transaction,
    signer?: TransactionSigner
  ): YesNoDaoComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<
    YesNoDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  simulate(
    options: SkipSignaturesSimulateOptions
  ): Promise<
    YesNoDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  simulate(
    options: RawSimulateOptions
  ): Promise<
    YesNoDaoComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<YesNoDaoComposerResults<TReturns>>;
};
export type YesNoDaoComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns;
  }
>;
