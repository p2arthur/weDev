/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from "@algorandfoundation/algokit-utils/types/algorand-client";
import {
  ABIReturn,
  AppReturn,
  SendAppTransactionResult,
} from "@algorandfoundation/algokit-utils/types/app";
import {
  Arc56Contract,
  getArc56ReturnValue,
  getABIStructFromABITuple,
} from "@algorandfoundation/algokit-utils/types/app-arc56";
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from "@algorandfoundation/algokit-utils/types/app-client";
import {
  AppFactory as _AppFactory,
  AppFactoryAppClientParams,
  AppFactoryResolveAppClientByCreatorAndNameParams,
  AppFactoryDeployParams,
  AppFactoryParams,
  CreateSchema,
} from "@algorandfoundation/algokit-utils/types/app-factory";
import {
  TransactionComposer,
  AppCallMethodCall,
  AppMethodCallTransactionArgument,
  SimulateOptions,
  RawSimulateOptions,
  SkipSignaturesSimulateOptions,
} from "@algorandfoundation/algokit-utils/types/composer";
import {
  SendParams,
  SendSingleTransactionResult,
  SendAtomicTransactionComposerResults,
} from "@algorandfoundation/algokit-utils/types/transaction";
import {
  Address,
  encodeAddress,
  modelsv2,
  OnApplicationComplete,
  Transaction,
  TransactionSigner,
} from "algosdk";
import SimulateResponse = modelsv2.SimulateResponse;

export const APP_SPEC: Arc56Contract = {
  name: "WeRepo",
  structs: {
    ProjectData: [
      { name: "projectReputation", type: "uint64" },
      { name: "projectContribution", type: "uint64" },
      { name: "dappIds", type: "uint64[]" },
      { name: "projectName", type: "string" },
    ],
  },
  methods: [
    {
      name: "createApplication",
      args: [],
      returns: { type: "void" },
      actions: { create: ["NoOp"], call: [] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "optInToApplication",
      args: [],
      returns: { type: "void" },
      actions: { create: [], call: ["OptIn"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "createNewProject",
      args: [
        { type: "string", name: "project_name" },
        { type: "string", name: "project_username" },
        { type: "uint64", name: "background_color" },
        { type: "uint64", name: "primary_color" },
        { type: "uint64", name: "secondary_color" },
        { type: "uint64", name: "accent_color" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "updateProjectName",
      args: [{ type: "string", name: "new_project_name" }],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "updateProjectColors",
      args: [
        { type: "uint64", name: "background_color" },
        { type: "uint64", name: "primary_color" },
        { type: "uint64", name: "secondary_color" },
        { type: "uint64", name: "accent_color" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "createProjectMicroDapp",
      args: [
        { type: "uint64", name: "dappId" },
        { type: "uint64", name: "type" },
        { type: "account", name: "creatorAddress" },
      ],
      returns: { type: "void" },
      actions: { create: [], call: ["NoOp"] },
      readonly: false,
      events: [],
      recommendations: {},
    },
    {
      name: "getProjectName",
      args: [],
      returns: { type: "string" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getDappIdByType",
      args: [{ type: "uint64", name: "type" }],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getAllDappIds",
      args: [],
      returns: { type: "uint64[]" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getProjectHoldersDao",
      args: [],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
    {
      name: "getProjectRewardsDao",
      args: [],
      returns: { type: "uint64" },
      actions: { create: [], call: ["NoOp"] },
      readonly: true,
      events: [],
      recommendations: {},
    },
  ],
  arcs: [22, 28],
  networks: {},
  state: {
    schema: { global: { ints: 1, bytes: 1 }, local: { ints: 4, bytes: 1 } },
    keys: {
      global: {
        manager_address: {
          keyType: "AVMString",
          valueType: "address",
          key: "bWFuYWdlcl9hZGRyZXNz",
        },
        total_projects: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "dG90YWxfcHJvamVjdHM=",
        },
      },
      local: {
        project_username: {
          keyType: "AVMString",
          valueType: "AVMString",
          key: "cHJvamVjdF91c2VybmFtZQ==",
        },
        project_background_color: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "cHJvamVjdF9iYWNrZ3JvdW5kX2NvbG9y",
        },
        project_primary_color: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "cHJvamVjdF9wcmltYXJ5X2NvbG9y",
        },
        project_secondary_color: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "cHJvamVjdF9zZWNvbmRhcnlfY29sb3I=",
        },
        project_accent_color: {
          keyType: "AVMString",
          valueType: "AVMUint64",
          key: "cHJvamVjdF9hY2NlbnRfY29sb3I=",
        },
      },
      box: {},
    },
    maps: {
      global: {},
      local: {},
      box: {
        project: {
          keyType: "address",
          valueType: "ProjectData",
          prefix: "X3A=",
        },
      },
    },
  },
  bareActions: { create: [], call: ["DeleteApplication"] },
  sourceInfo: {
    approval: {
      sourceInfo: [
        {
          pc: [640, 683, 770, 782, 830, 907, 977, 1005, 1063, 1089, 1131],
          errorMessage: "Box must have value",
        },
        { pc: [888], errorMessage: "Index access is out of bounds" },
        {
          pc: [247, 263, 279, 295, 316, 340, 366, 394, 412, 462],
          errorMessage: "OnCompletion is not NoOp",
        },
        { pc: [453], errorMessage: "OnCompletion is not OptIn" },
        {
          pc: [666],
          errorMessage: "Project created by the given address does not exist",
        },
        {
          pc: [971, 999, 1057, 1083, 1125],
          errorMessage: "Project does not exist",
        },
        { pc: [710], errorMessage: "User has not opted in to the contract" },
        { pc: [466], errorMessage: "can only call when creating" },
        {
          pc: [250, 266, 282, 298, 319, 343, 369, 397, 415, 456, 485],
          errorMessage: "can only call when not creating",
        },
        { pc: [617, 819], errorMessage: "check GlobalState exists" },
      ],
      pcOffsetMethod: "none",
    },
    clear: { sourceInfo: [], pcOffsetMethod: "none" },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  byteCode: {
    approval:
      "CiAEAQASECYKAl9wBBUffHUOdG90YWxfcHJvamVjdHMIAAAAAAAAAAAQcHJvamVjdF91c2VybmFtZRhwcm9qZWN0X2JhY2tncm91bmRfY29sb3IVcHJvamVjdF9wcmltYXJ5X2NvbG9yF3Byb2plY3Rfc2Vjb25kYXJ5X2NvbG9yFHByb2plY3RfYWNjZW50X2NvbG9yAgAAMRtBATqCCwS4RHs2BAGjo/8ExEvXrQT4ORi6BBv8uTgE45pJngQlV/ZkBOpjiXIE6YlEUASNwLI+BB13yfE2GgCOCwDZAM8ApwCVAHkAXwBHADIAIgASAAIjQzEZFEQxGESIA10pTFCwIkMxGRREMRhEiAMjKUxQsCJDMRkURDEYRIgC/ClMULAiQzEZFEQxGEQ2GgEXiAKrFilMULAiQzEZFEQxGESIAoFJFRZXBgJMUClMULAiQzEZFEQxGEQ2GgEXNhoCFzYaAxfAHIgBeyJDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIATYiQzEZFEQxGEQ2GgFXAgCIAPkiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXNhoEFzYaBRc2GgYXiABBIkMxGSISRDEYRCJDMRkURDEYFESIABIiQ4EFMRmOAQADQv8PMRhEIkOAD21hbmFnZXJfYWRkcmVzczEAZyojZ4mKBgAoMQBQvUUBQABjKDEAUIH0A7lIi/oVFlcGAov6UIAWAAAAAAAAAAEAAAAAAAAAAQAUABYAAExQKDEAUEm8SEy/MQAnBIv7ZjEAJwWL/GYxACcGi/1mMQAnB4v+ZjEAJwiL/2YjKmVEIggqTGeJi/oVFlcGAov6UCgxAFBJvkRJJFkjTFhPAlBLAbxIv4mKAQAoMQBQvUUBRIv/FRZXBgKL/1AoMQBQSb5ESSRZI0xYTwJQSwG8SL+JigQAMQAjJwRjRQFEMQAnBYv8ZjEAJwaL/WYxACcHi/5mMQAnCIv/ZomKAwAjgAAoMQBQvUUBQABFKDEAUIH0A7lIKDEAUL5EI1uBBQgWKDEAUL5EgQhbgQUIFlCAAgAUUIACABZQJwlQJwlQKDEAUEm8SEy/IyplRCIIKkxnKIv/UL5ESSVZSwEkWVKMAIsAI1lJjAGL/gxBABeLAFcCACtQSRWBCAoWVwYCTFCMAEL/3Iv9Fov+IglJiwEMRIEIC4ECCIsATE8CXSgxAFBJvkRJJVlLASNLAlhLAiRZSwMVTwRLAk8CUk8CSwVQTFBMTwIJTwMVSwIkWQhMCRZXBgJcEksBvEi/iSgxAFC9RQFEKDEAUL5ESSRZSwEVUlcCAImKAQEoMQBQvUUBRCgxAFC+REklWUsBJFlSi/8jDkAACosAI1mL/wxBAAMjTImL/yIJiwBXAgBMgQgLW0yJKDEAUL1FAUQoMQBQvkRJJVlLASRZUomKAAEoMQBQvUUBRCgxAFC+REklWUsBJFlSSSNZQQAHiwBXAghMiStC//qKAAEoMQBQvUUBRCgxAFC+REklWUsBJFlSSSNZgQIPQQAHiwBXCghMiStC//o=",
    clear: "CoEBQw==",
  },
  compilerInfo: {
    compiler: "puya",
    compilerVersion: { major: 4, minor: 7, patch: 0 },
  },
  events: [],
  templateVariables: {},
} as unknown as Arc56Contract;

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined;
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined;
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value;
  }

  asString(): string | undefined {
    return this.value !== undefined
      ? Buffer.from(this.value).toString("utf-8")
      : undefined;
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
  ? { [K in keyof O]: O[K] }
  : never;

// Type definitions for ARC-56 structs

export type ProjectData = {
  projectReputation: bigint;
  projectContribution: bigint;
  dappIds: bigint[];
  projectName: string;
};

/**
 * Converts the ABI tuple representation of a ProjectData to the struct representation
 */
export function ProjectDataFromTuple(
  abiTuple: [bigint, bigint, bigint[], string]
) {
  return getABIStructFromABITuple(
    abiTuple,
    APP_SPEC.structs.ProjectData,
    APP_SPEC.structs
  ) as ProjectData;
}

/**
 * The argument types for the WeRepo contract
 */
export type WeRepoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    "createApplication()void": Record<string, never>;
    "optInToApplication()void": Record<string, never>;
    "createNewProject(string,string,uint64,uint64,uint64,uint64)void": {
      projectName: string;
      projectUsername: string;
      backgroundColor: bigint | number;
      primaryColor: bigint | number;
      secondaryColor: bigint | number;
      accentColor: bigint | number;
    };
    "updateProjectName(string)void": {
      newProjectName: string;
    };
    "updateProjectColors(uint64,uint64,uint64,uint64)void": {
      backgroundColor: bigint | number;
      primaryColor: bigint | number;
      secondaryColor: bigint | number;
      accentColor: bigint | number;
    };
    "createProjectMicroDapp(uint64,uint64,account)void": {
      dappId: bigint | number;
      type: bigint | number;
      creatorAddress: Uint8Array | string;
    };
    "getProjectName()string": Record<string, never>;
    "getDappIdByType(uint64)uint64": {
      type: bigint | number;
    };
    "getAllDappIds()uint64[]": Record<string, never>;
    "getProjectHoldersDao()uint64": Record<string, never>;
    "getProjectRewardsDao()uint64": Record<string, never>;
  };
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    "createApplication()void": [];
    "optInToApplication()void": [];
    "createNewProject(string,string,uint64,uint64,uint64,uint64)void": [
      projectName: string,
      projectUsername: string,
      backgroundColor: bigint | number,
      primaryColor: bigint | number,
      secondaryColor: bigint | number,
      accentColor: bigint | number
    ];
    "updateProjectName(string)void": [newProjectName: string];
    "updateProjectColors(uint64,uint64,uint64,uint64)void": [
      backgroundColor: bigint | number,
      primaryColor: bigint | number,
      secondaryColor: bigint | number,
      accentColor: bigint | number
    ];
    "createProjectMicroDapp(uint64,uint64,account)void": [
      dappId: bigint | number,
      type: bigint | number,
      creatorAddress: Uint8Array | string
    ];
    "getProjectName()string": [];
    "getDappIdByType(uint64)uint64": [type: bigint | number];
    "getAllDappIds()uint64[]": [];
    "getProjectHoldersDao()uint64": [];
    "getProjectRewardsDao()uint64": [];
  };
};

/**
 * The return type for each method
 */
export type WeRepoReturns = {
  "createApplication()void": void;
  "optInToApplication()void": void;
  "createNewProject(string,string,uint64,uint64,uint64,uint64)void": void;
  "updateProjectName(string)void": void;
  "updateProjectColors(uint64,uint64,uint64,uint64)void": void;
  "createProjectMicroDapp(uint64,uint64,account)void": void;
  "getProjectName()string": string;
  "getDappIdByType(uint64)uint64": bigint;
  "getAllDappIds()uint64[]": bigint[];
  "getProjectHoldersDao()uint64": bigint;
  "getProjectRewardsDao()uint64": bigint;
};

/**
 * Defines the types of available calls and state of the WeRepo smart contract.
 */
export type WeRepoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "createApplication()void" | "createApplication",
    {
      argsObj: WeRepoArgs["obj"]["createApplication()void"];
      argsTuple: WeRepoArgs["tuple"]["createApplication()void"];
      returns: WeRepoReturns["createApplication()void"];
    }
  > &
    Record<
      "optInToApplication()void" | "optInToApplication",
      {
        argsObj: WeRepoArgs["obj"]["optInToApplication()void"];
        argsTuple: WeRepoArgs["tuple"]["optInToApplication()void"];
        returns: WeRepoReturns["optInToApplication()void"];
      }
    > &
    Record<
      | "createNewProject(string,string,uint64,uint64,uint64,uint64)void"
      | "createNewProject",
      {
        argsObj: WeRepoArgs["obj"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"];
        argsTuple: WeRepoArgs["tuple"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"];
        returns: WeRepoReturns["createNewProject(string,string,uint64,uint64,uint64,uint64)void"];
      }
    > &
    Record<
      "updateProjectName(string)void" | "updateProjectName",
      {
        argsObj: WeRepoArgs["obj"]["updateProjectName(string)void"];
        argsTuple: WeRepoArgs["tuple"]["updateProjectName(string)void"];
        returns: WeRepoReturns["updateProjectName(string)void"];
      }
    > &
    Record<
      | "updateProjectColors(uint64,uint64,uint64,uint64)void"
      | "updateProjectColors",
      {
        argsObj: WeRepoArgs["obj"]["updateProjectColors(uint64,uint64,uint64,uint64)void"];
        argsTuple: WeRepoArgs["tuple"]["updateProjectColors(uint64,uint64,uint64,uint64)void"];
        returns: WeRepoReturns["updateProjectColors(uint64,uint64,uint64,uint64)void"];
      }
    > &
    Record<
      | "createProjectMicroDapp(uint64,uint64,account)void"
      | "createProjectMicroDapp",
      {
        argsObj: WeRepoArgs["obj"]["createProjectMicroDapp(uint64,uint64,account)void"];
        argsTuple: WeRepoArgs["tuple"]["createProjectMicroDapp(uint64,uint64,account)void"];
        returns: WeRepoReturns["createProjectMicroDapp(uint64,uint64,account)void"];
      }
    > &
    Record<
      "getProjectName()string" | "getProjectName",
      {
        argsObj: WeRepoArgs["obj"]["getProjectName()string"];
        argsTuple: WeRepoArgs["tuple"]["getProjectName()string"];
        returns: WeRepoReturns["getProjectName()string"];
      }
    > &
    Record<
      "getDappIdByType(uint64)uint64" | "getDappIdByType",
      {
        argsObj: WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"];
        argsTuple: WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"];
        returns: WeRepoReturns["getDappIdByType(uint64)uint64"];
      }
    > &
    Record<
      "getAllDappIds()uint64[]" | "getAllDappIds",
      {
        argsObj: WeRepoArgs["obj"]["getAllDappIds()uint64[]"];
        argsTuple: WeRepoArgs["tuple"]["getAllDappIds()uint64[]"];
        returns: WeRepoReturns["getAllDappIds()uint64[]"];
      }
    > &
    Record<
      "getProjectHoldersDao()uint64" | "getProjectHoldersDao",
      {
        argsObj: WeRepoArgs["obj"]["getProjectHoldersDao()uint64"];
        argsTuple: WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"];
        returns: WeRepoReturns["getProjectHoldersDao()uint64"];
      }
    > &
    Record<
      "getProjectRewardsDao()uint64" | "getProjectRewardsDao",
      {
        argsObj: WeRepoArgs["obj"]["getProjectRewardsDao()uint64"];
        argsTuple: WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"];
        returns: WeRepoReturns["getProjectRewardsDao()uint64"];
      }
    >;
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: string;
        totalProjects: bigint;
      };
      maps: {};
    };
    local: {
      keys: {
        projectUsername: string;
        projectBackgroundColor: bigint;
        projectPrimaryColor: bigint;
        projectSecondaryColor: bigint;
        projectAccentColor: bigint;
      };
      maps: {};
    };
    box: {
      keys: {};
      maps: {
        project: Map<string, ProjectData>;
      };
    };
  };
};

/**
 * Defines the possible abi call signatures.
 */
export type WeRepoSignatures = keyof WeRepoTypes["methods"];
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WeRepoNonVoidMethodSignatures =
  keyof WeRepoTypes["methods"] extends infer T
    ? T extends keyof WeRepoTypes["methods"]
      ? MethodReturn<T> extends void
        ? never
        : T
      : never
    : never;
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, "method" | "args" | "onComplete"> & {
    /** The args for the ABI method call, either as an ordered array or an object */
    args: Expand<TArgs>;
  }
>;
/**
 * Maps a method signature from the WeRepo smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WeRepoSignatures> =
  WeRepoTypes["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the WeRepo smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WeRepoSignatures> =
  WeRepoTypes["methods"][TSignature]["returns"];

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WeRepoTypes["state"]["global"]["keys"];

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = WeRepoTypes["state"]["local"]["keys"];

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WeRepoTypes["state"]["box"]["keys"];

/**
 * Defines supported create method params for this smart contract
 */
export type WeRepoCreateCallParams =
  | Expand<
      CallParams<
        | WeRepoArgs["obj"]["createApplication()void"]
        | WeRepoArgs["tuple"]["createApplication()void"]
      > & { method: "createApplication" } & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } & CreateSchema
    >
  | Expand<
      CallParams<
        | WeRepoArgs["obj"]["createApplication()void"]
        | WeRepoArgs["tuple"]["createApplication()void"]
      > & { method: "createApplication()void" } & {
        onComplete?: OnApplicationComplete.NoOpOC;
      } & CreateSchema
    >;
/**
 * Defines supported delete method params for this smart contract
 */
export type WeRepoDeleteCallParams =
  | Expand<AppClientBareCallParams> & { method?: never };
/**
 * Defines arguments required for the deploy method.
 */
export type WeRepoDeployParams = Expand<
  Omit<
    AppFactoryDeployParams,
    "createParams" | "updateParams" | "deleteParams"
  > & {
    /**
     * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    createParams?: WeRepoCreateCallParams;
    /**
     * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
     */
    deleteParams?: WeRepoDeleteCallParams;
  }
>;

/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WeRepo smart contract
 */
export abstract class WeRepoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<
        TParams extends WeRepoCreateCallParams & { method: string }
      >(params: TParams) {
        switch (params.method) {
          case "createApplication":
          case "createApplication()void":
            return WeRepoParamsFactory.create.createApplication(params);
        }
        throw new Error(`Unknown ' + verb + ' method`);
      },

      /**
       * Constructs create ABI call params for the WeRepo smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(
        params: CallParams<
          | WeRepoArgs["obj"]["createApplication()void"]
          | WeRepoArgs["tuple"]["createApplication()void"]
        > &
          AppClientCompilationParams & {
            onComplete?: OnApplicationComplete.NoOpOC;
          }
      ): AppClientMethodCallParams &
        AppClientCompilationParams & {
          onComplete?: OnApplicationComplete.NoOpOC;
        } {
        return {
          ...params,
          method: "createApplication()void" as const,
          args: Array.isArray(params.args) ? params.args : [],
        };
      },
    };
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the WeRepo smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(
        params: CallParams<
          | WeRepoArgs["obj"]["optInToApplication()void"]
          | WeRepoArgs["tuple"]["optInToApplication()void"]
        >
      ): AppClientMethodCallParams {
        return {
          ...params,
          method: "optInToApplication()void" as const,
          args: Array.isArray(params.args) ? params.args : [],
        };
      },
    };
  }

  /**
   * Constructs a no op call for the createNewProject(string,string,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProject(
    params: CallParams<
      | WeRepoArgs["obj"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
      | WeRepoArgs["tuple"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method:
        "createNewProject(string,string,uint64,uint64,uint64,uint64)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.projectName,
            params.args.projectUsername,
            params.args.backgroundColor,
            params.args.primaryColor,
            params.args.secondaryColor,
            params.args.accentColor,
          ],
    };
  }
  /**
   * Constructs a no op call for the updateProjectName(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateProjectName(
    params: CallParams<
      | WeRepoArgs["obj"]["updateProjectName(string)void"]
      | WeRepoArgs["tuple"]["updateProjectName(string)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "updateProjectName(string)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.newProjectName],
    };
  }
  /**
   * Constructs a no op call for the updateProjectColors(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateProjectColors(
    params: CallParams<
      | WeRepoArgs["obj"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
      | WeRepoArgs["tuple"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "updateProjectColors(uint64,uint64,uint64,uint64)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [
            params.args.backgroundColor,
            params.args.primaryColor,
            params.args.secondaryColor,
            params.args.accentColor,
          ],
    };
  }
  /**
   * Constructs a no op call for the createProjectMicroDapp(uint64,uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProjectMicroDapp(
    params: CallParams<
      | WeRepoArgs["obj"]["createProjectMicroDapp(uint64,uint64,account)void"]
      | WeRepoArgs["tuple"]["createProjectMicroDapp(uint64,uint64,account)void"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "createProjectMicroDapp(uint64,uint64,account)void" as const,
      args: Array.isArray(params.args)
        ? params.args
        : [params.args.dappId, params.args.type, params.args.creatorAddress],
    };
  }
  /**
   * Constructs a no op call for the getProjectName()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProjectName(
    params: CallParams<
      | WeRepoArgs["obj"]["getProjectName()string"]
      | WeRepoArgs["tuple"]["getProjectName()string"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getProjectName()string" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the getDappIdByType(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDappIdByType(
    params: CallParams<
      | WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"]
      | WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getDappIdByType(uint64)uint64" as const,
      args: Array.isArray(params.args) ? params.args : [params.args.type],
    };
  }
  /**
   * Constructs a no op call for the getAllDappIds()uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllDappIds(
    params: CallParams<
      | WeRepoArgs["obj"]["getAllDappIds()uint64[]"]
      | WeRepoArgs["tuple"]["getAllDappIds()uint64[]"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getAllDappIds()uint64[]" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the getProjectHoldersDao()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProjectHoldersDao(
    params: CallParams<
      | WeRepoArgs["obj"]["getProjectHoldersDao()uint64"]
      | WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getProjectHoldersDao()uint64" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
  /**
   * Constructs a no op call for the getProjectRewardsDao()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProjectRewardsDao(
    params: CallParams<
      | WeRepoArgs["obj"]["getProjectRewardsDao()uint64"]
      | WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"]
    > &
      CallOnComplete
  ): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: "getProjectRewardsDao()uint64" as const,
      args: Array.isArray(params.args) ? params.args : [],
    };
  }
}

/**
 * A factory to create and deploy one or more instance of the WeRepo smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WeRepoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory;

  /**
   * Creates a new instance of `WeRepoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, "appSpec">) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    });
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName;
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC;
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand;
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WeRepoClient(this.appFactory.getAppClientById(params));
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams
  ) {
    return new WeRepoClient(
      await this.appFactory.getAppClientByCreatorAndName(params)
    );
  }

  /**
   * Idempotently deploys the WeRepo smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WeRepoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method
        ? WeRepoParamsFactory.create._resolveByMethod(params.createParams)
        : params.createParams
        ? (params.createParams as WeRepoCreateCallParams & {
            args: Uint8Array[];
          })
        : undefined,
    });
    return {
      result: result.result,
      appClient: new WeRepoClient(result.appClient),
    };
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (
        params: CallParams<
          | WeRepoArgs["obj"]["createApplication()void"]
          | WeRepoArgs["tuple"]["createApplication()void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC } = {
          args: [],
        }
      ) => {
        return this.appFactory.params.create(
          WeRepoParamsFactory.create.createApplication(params)
        );
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the WeRepo smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params);
      },
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (
        params: CallParams<
          | WeRepoArgs["obj"]["createApplication()void"]
          | WeRepoArgs["tuple"]["createApplication()void"]
        > &
          AppClientCompilationParams &
          CreateSchema & { onComplete?: OnApplicationComplete.NoOpOC } = {
          args: [],
        }
      ) => {
        return this.appFactory.createTransaction.create(
          WeRepoParamsFactory.create.createApplication(params)
        );
      },
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (
        params: CallParams<
          | WeRepoArgs["obj"]["createApplication()void"]
          | WeRepoArgs["tuple"]["createApplication()void"]
        > &
          AppClientCompilationParams &
          CreateSchema &
          SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
          args: [],
        }
      ) => {
        const result = await this.appFactory.send.create(
          WeRepoParamsFactory.create.createApplication(params)
        );
        return {
          result: {
            ...result.result,
            return: result.result.return as unknown as
              | undefined
              | WeRepoReturns["createApplication()void"],
          },
          appClient: new WeRepoClient(result.appClient),
        };
      },
    },
  };
}
/**
 * A client to make calls to the WeRepo smart contract
 */
export class WeRepoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient;

  /**
   * Creates a new instance of `WeRepoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WeRepo app spec
   */
  constructor(appClient: _AppClient);
  /**
   * Creates a new instance of `WeRepoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, "appSpec">);
  constructor(
    appClientOrParams: _AppClient | Omit<AppClientParams, "appSpec">
  ) {
    this.appClient =
      appClientOrParams instanceof _AppClient
        ? appClientOrParams
        : new _AppClient({
            ...appClientOrParams,
            appSpec: APP_SPEC,
          });
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WeRepoNonVoidMethodSignatures>(
    method: TSignature,
    returnValue: ABIReturn | undefined
  ) {
    return returnValue !== undefined
      ? getArc56ReturnValue<MethodReturn<TSignature>>(
          returnValue,
          this.appClient.getABIMethod(method),
          APP_SPEC.structs
        )
      : undefined;
  }

  /**
   * Returns a new `WeRepoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(
    params: Omit<ResolveAppClientByCreatorAndName, "appSpec">
  ): Promise<WeRepoClient> {
    return new WeRepoClient(
      await _AppClient.fromCreatorAndName({ ...params, appSpec: APP_SPEC })
    );
  }

  /**
   * Returns an `WeRepoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, "appSpec">
  ): Promise<WeRepoClient> {
    return new WeRepoClient(
      await _AppClient.fromNetwork({ ...params, appSpec: APP_SPEC })
    );
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId;
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress;
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName;
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec;
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand;
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the WeRepo smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params);
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the WeRepo smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (
        params: CallParams<
          | WeRepoArgs["obj"]["optInToApplication()void"]
          | WeRepoArgs["tuple"]["optInToApplication()void"]
        > = { args: [] }
      ) => {
        return this.appClient.params.optIn(
          WeRepoParamsFactory.optIn.optInToApplication(params)
        );
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params);
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject(string,string,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProject: (
      params: CallParams<
        | WeRepoArgs["obj"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
        | WeRepoArgs["tuple"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.createNewProject(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `updateProjectName(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateProjectName: (
      params: CallParams<
        | WeRepoArgs["obj"]["updateProjectName(string)void"]
        | WeRepoArgs["tuple"]["updateProjectName(string)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.updateProjectName(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `updateProjectColors(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateProjectColors: (
      params: CallParams<
        | WeRepoArgs["obj"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
        | WeRepoArgs["tuple"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.updateProjectColors(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createProjectMicroDapp(uint64,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createProjectMicroDapp: (
      params: CallParams<
        | WeRepoArgs["obj"]["createProjectMicroDapp(uint64,uint64,account)void"]
        | WeRepoArgs["tuple"]["createProjectMicroDapp(uint64,uint64,account)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.createProjectMicroDapp(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectName()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProjectName: (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectName()string"]
        | WeRepoArgs["tuple"]["getProjectName()string"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.getProjectName(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getDappIdByType(uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getDappIdByType: (
      params: CallParams<
        | WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"]
        | WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.getDappIdByType(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getAllDappIds()uint64[]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllDappIds: (
      params: CallParams<
        | WeRepoArgs["obj"]["getAllDappIds()uint64[]"]
        | WeRepoArgs["tuple"]["getAllDappIds()uint64[]"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.getAllDappIds(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectHoldersDao()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProjectHoldersDao: (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectHoldersDao()uint64"]
        | WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.getProjectHoldersDao(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectRewardsDao()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProjectRewardsDao: (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectRewardsDao()uint64"]
        | WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.params.call(
        WeRepoParamsFactory.getProjectRewardsDao(params)
      );
    },
  };

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the WeRepo smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params);
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the WeRepo smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (
        params: CallParams<
          | WeRepoArgs["obj"]["optInToApplication()void"]
          | WeRepoArgs["tuple"]["optInToApplication()void"]
        > = { args: [] }
      ) => {
        return this.appClient.createTransaction.optIn(
          WeRepoParamsFactory.optIn.optInToApplication(params)
        );
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params);
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject(string,string,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProject: (
      params: CallParams<
        | WeRepoArgs["obj"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
        | WeRepoArgs["tuple"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.createNewProject(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `updateProjectName(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateProjectName: (
      params: CallParams<
        | WeRepoArgs["obj"]["updateProjectName(string)void"]
        | WeRepoArgs["tuple"]["updateProjectName(string)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.updateProjectName(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `updateProjectColors(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateProjectColors: (
      params: CallParams<
        | WeRepoArgs["obj"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
        | WeRepoArgs["tuple"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.updateProjectColors(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createProjectMicroDapp(uint64,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createProjectMicroDapp: (
      params: CallParams<
        | WeRepoArgs["obj"]["createProjectMicroDapp(uint64,uint64,account)void"]
        | WeRepoArgs["tuple"]["createProjectMicroDapp(uint64,uint64,account)void"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.createProjectMicroDapp(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectName()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProjectName: (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectName()string"]
        | WeRepoArgs["tuple"]["getProjectName()string"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.getProjectName(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getDappIdByType(uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getDappIdByType: (
      params: CallParams<
        | WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"]
        | WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.getDappIdByType(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getAllDappIds()uint64[]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllDappIds: (
      params: CallParams<
        | WeRepoArgs["obj"]["getAllDappIds()uint64[]"]
        | WeRepoArgs["tuple"]["getAllDappIds()uint64[]"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.getAllDappIds(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectHoldersDao()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProjectHoldersDao: (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectHoldersDao()uint64"]
        | WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.getProjectHoldersDao(params)
      );
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectRewardsDao()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProjectRewardsDao: (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectRewardsDao()uint64"]
        | WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"]
      > & { onComplete?: OnApplicationComplete.NoOpOC } = { args: [] }
    ) => {
      return this.appClient.createTransaction.call(
        WeRepoParamsFactory.getProjectRewardsDao(params)
      );
    },
  };

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the WeRepo smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params);
      },
    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the WeRepo smart contract using the `optInToApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (
        params: CallParams<
          | WeRepoArgs["obj"]["optInToApplication()void"]
          | WeRepoArgs["tuple"]["optInToApplication()void"]
        > &
          SendParams = { args: [] }
      ) => {
        const result = await this.appClient.send.optIn(
          WeRepoParamsFactory.optIn.optInToApplication(params)
        );
        return {
          ...result,
          return: result.return as unknown as
            | undefined
            | WeRepoReturns["optInToApplication()void"],
        };
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params);
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject(string,string,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProject: async (
      params: CallParams<
        | WeRepoArgs["obj"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
        | WeRepoArgs["tuple"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.createNewProject(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["createNewProject(string,string,uint64,uint64,uint64,uint64)void"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `updateProjectName(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateProjectName: async (
      params: CallParams<
        | WeRepoArgs["obj"]["updateProjectName(string)void"]
        | WeRepoArgs["tuple"]["updateProjectName(string)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.updateProjectName(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["updateProjectName(string)void"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `updateProjectColors(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateProjectColors: async (
      params: CallParams<
        | WeRepoArgs["obj"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
        | WeRepoArgs["tuple"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.updateProjectColors(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["updateProjectColors(uint64,uint64,uint64,uint64)void"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createProjectMicroDapp(uint64,uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createProjectMicroDapp: async (
      params: CallParams<
        | WeRepoArgs["obj"]["createProjectMicroDapp(uint64,uint64,account)void"]
        | WeRepoArgs["tuple"]["createProjectMicroDapp(uint64,uint64,account)void"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.createProjectMicroDapp(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["createProjectMicroDapp(uint64,uint64,account)void"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectName()string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProjectName: async (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectName()string"]
        | WeRepoArgs["tuple"]["getProjectName()string"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
        args: [],
      }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.getProjectName(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["getProjectName()string"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getDappIdByType(uint64)uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getDappIdByType: async (
      params: CallParams<
        | WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"]
        | WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.getDappIdByType(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["getDappIdByType(uint64)uint64"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getAllDappIds()uint64[]` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllDappIds: async (
      params: CallParams<
        | WeRepoArgs["obj"]["getAllDappIds()uint64[]"]
        | WeRepoArgs["tuple"]["getAllDappIds()uint64[]"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
        args: [],
      }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.getAllDappIds(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["getAllDappIds()uint64[]"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectHoldersDao()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProjectHoldersDao: async (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectHoldersDao()uint64"]
        | WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
        args: [],
      }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.getProjectHoldersDao(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["getProjectHoldersDao()uint64"],
      };
    },

    /**
     * Makes a call to the WeRepo smart contract using the `getProjectRewardsDao()uint64` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProjectRewardsDao: async (
      params: CallParams<
        | WeRepoArgs["obj"]["getProjectRewardsDao()uint64"]
        | WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"]
      > &
        SendParams & { onComplete?: OnApplicationComplete.NoOpOC } = {
        args: [],
      }
    ) => {
      const result = await this.appClient.send.call(
        WeRepoParamsFactory.getProjectRewardsDao(params)
      );
      return {
        ...result,
        return: result.return as unknown as
          | undefined
          | WeRepoReturns["getProjectRewardsDao()uint64"],
      };
    },
  };

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WeRepoClient(this.appClient.clone(params));
  }

  /**
   * Makes a readonly (simulated) call to the WeRepo smart contract using the `getProjectName()string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getProjectName(
    params: CallParams<
      | WeRepoArgs["obj"]["getProjectName()string"]
      | WeRepoArgs["tuple"]["getProjectName()string"]
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(
      WeRepoParamsFactory.getProjectName(params)
    );
    return result.return as unknown as WeRepoReturns["getProjectName()string"];
  }

  /**
   * Makes a readonly (simulated) call to the WeRepo smart contract using the `getDappIdByType(uint64)uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getDappIdByType(
    params: CallParams<
      | WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"]
      | WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"]
    >
  ) {
    const result = await this.appClient.send.call(
      WeRepoParamsFactory.getDappIdByType(params)
    );
    return result.return as unknown as WeRepoReturns["getDappIdByType(uint64)uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the WeRepo smart contract using the `getAllDappIds()uint64[]` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAllDappIds(
    params: CallParams<
      | WeRepoArgs["obj"]["getAllDappIds()uint64[]"]
      | WeRepoArgs["tuple"]["getAllDappIds()uint64[]"]
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(
      WeRepoParamsFactory.getAllDappIds(params)
    );
    return result.return as unknown as WeRepoReturns["getAllDappIds()uint64[]"];
  }

  /**
   * Makes a readonly (simulated) call to the WeRepo smart contract using the `getProjectHoldersDao()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getProjectHoldersDao(
    params: CallParams<
      | WeRepoArgs["obj"]["getProjectHoldersDao()uint64"]
      | WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"]
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(
      WeRepoParamsFactory.getProjectHoldersDao(params)
    );
    return result.return as unknown as WeRepoReturns["getProjectHoldersDao()uint64"];
  }

  /**
   * Makes a readonly (simulated) call to the WeRepo smart contract using the `getProjectRewardsDao()uint64` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getProjectRewardsDao(
    params: CallParams<
      | WeRepoArgs["obj"]["getProjectRewardsDao()uint64"]
      | WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"]
    > = { args: [] }
  ) {
    const result = await this.appClient.send.call(
      WeRepoParamsFactory.getProjectRewardsDao(params)
    );
    return result.return as unknown as WeRepoReturns["getProjectRewardsDao()uint64"];
  }

  /**
   * Methods to access state for the current WeRepo app
   */
  state = {
    /**
     * Methods to access global state for the current WeRepo app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll();
        return {
          managerAddress: result.manager_address,
          totalProjects: result.total_projects,
        };
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<string | undefined> => {
        return (await this.appClient.state.global.getValue(
          "manager_address"
        )) as string | undefined;
      },
      /**
       * Get the current value of the total_projects key in global state
       */
      totalProjects: async (): Promise<bigint | undefined> => {
        return (await this.appClient.state.global.getValue(
          "total_projects"
        )) as bigint | undefined;
      },
    },
    /**
     * Methods to access local state for the current WeRepo app
     */
    local: (address: string | Address) => {
      const encodedAddress =
        typeof address === "string"
          ? address
          : encodeAddress(address.publicKey);
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state
            .local(encodedAddress)
            .getAll();
          return {
            projectUsername: result.project_username,
            projectBackgroundColor: result.project_background_color,
            projectPrimaryColor: result.project_primary_color,
            projectSecondaryColor: result.project_secondary_color,
            projectAccentColor: result.project_accent_color,
          };
        },
        /**
         * Get the current value of the project_username key in local state
         */
        projectUsername: async (): Promise<string | undefined> => {
          return (await this.appClient.state
            .local(encodedAddress)
            .getValue("project_username")) as string | undefined;
        },
        /**
         * Get the current value of the project_background_color key in local state
         */
        projectBackgroundColor: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state
            .local(encodedAddress)
            .getValue("project_background_color")) as bigint | undefined;
        },
        /**
         * Get the current value of the project_primary_color key in local state
         */
        projectPrimaryColor: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state
            .local(encodedAddress)
            .getValue("project_primary_color")) as bigint | undefined;
        },
        /**
         * Get the current value of the project_secondary_color key in local state
         */
        projectSecondaryColor: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state
            .local(encodedAddress)
            .getValue("project_secondary_color")) as bigint | undefined;
        },
        /**
         * Get the current value of the project_accent_color key in local state
         */
        projectAccentColor: async (): Promise<bigint | undefined> => {
          return (await this.appClient.state
            .local(encodedAddress)
            .getValue("project_accent_color")) as bigint | undefined;
        },
      };
    },
    /**
     * Methods to access box state for the current WeRepo app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll();
        return {};
      },
      /**
       * Get values from the project map in box state
       */
      project: {
        /**
         * Get all current values of the project map in box state
         */
        getMap: async (): Promise<Map<string, ProjectData>> => {
          return (await this.appClient.state.box.getMap("project")) as Map<
            string,
            ProjectData
          >;
        },
        /**
         * Get a current value of the project map by key from box state
         */
        value: async (key: string): Promise<ProjectData | undefined> => {
          return (await this.appClient.state.box.getMapValue(
            "project",
            key
          )) as ProjectData | undefined;
        },
      },
    },
  };

  public newGroup(): WeRepoComposer {
    const client = this;
    const composer = this.algorand.newGroup();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<
      undefined | ((x: ABIReturn | undefined) => any)
    > = [];
    return {
      /**
       * Add a createNewProject(string,string,uint64,uint64,uint64,uint64)void method call against the WeRepo contract
       */
      createNewProject(
        params: CallParams<
          | WeRepoArgs["obj"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
          | WeRepoArgs["tuple"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.createNewProject(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a updateProjectName(string)void method call against the WeRepo contract
       */
      updateProjectName(
        params: CallParams<
          | WeRepoArgs["obj"]["updateProjectName(string)void"]
          | WeRepoArgs["tuple"]["updateProjectName(string)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.updateProjectName(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a updateProjectColors(uint64,uint64,uint64,uint64)void method call against the WeRepo contract
       */
      updateProjectColors(
        params: CallParams<
          | WeRepoArgs["obj"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
          | WeRepoArgs["tuple"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.updateProjectColors(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a createProjectMicroDapp(uint64,uint64,account)void method call against the WeRepo contract
       */
      createProjectMicroDapp(
        params: CallParams<
          | WeRepoArgs["obj"]["createProjectMicroDapp(uint64,uint64,account)void"]
          | WeRepoArgs["tuple"]["createProjectMicroDapp(uint64,uint64,account)void"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.createProjectMicroDapp(params)
          )
        );
        resultMappers.push(undefined);
        return this;
      },
      /**
       * Add a getProjectName()string method call against the WeRepo contract
       */
      getProjectName(
        params: CallParams<
          | WeRepoArgs["obj"]["getProjectName()string"]
          | WeRepoArgs["tuple"]["getProjectName()string"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.getProjectName(params)
          )
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("getProjectName()string", v)
        );
        return this;
      },
      /**
       * Add a getDappIdByType(uint64)uint64 method call against the WeRepo contract
       */
      getDappIdByType(
        params: CallParams<
          | WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"]
          | WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.getDappIdByType(params)
          )
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("getDappIdByType(uint64)uint64", v)
        );
        return this;
      },
      /**
       * Add a getAllDappIds()uint64[] method call against the WeRepo contract
       */
      getAllDappIds(
        params: CallParams<
          | WeRepoArgs["obj"]["getAllDappIds()uint64[]"]
          | WeRepoArgs["tuple"]["getAllDappIds()uint64[]"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.getAllDappIds(params)
          )
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("getAllDappIds()uint64[]", v)
        );
        return this;
      },
      /**
       * Add a getProjectHoldersDao()uint64 method call against the WeRepo contract
       */
      getProjectHoldersDao(
        params: CallParams<
          | WeRepoArgs["obj"]["getProjectHoldersDao()uint64"]
          | WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.getProjectHoldersDao(params)
          )
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("getProjectHoldersDao()uint64", v)
        );
        return this;
      },
      /**
       * Add a getProjectRewardsDao()uint64 method call against the WeRepo contract
       */
      getProjectRewardsDao(
        params: CallParams<
          | WeRepoArgs["obj"]["getProjectRewardsDao()uint64"]
          | WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"]
        > & { onComplete?: OnApplicationComplete.NoOpOC }
      ) {
        promiseChain = promiseChain.then(async () =>
          composer.addAppCallMethodCall(
            await client.params.getProjectRewardsDao(params)
          )
        );
        resultMappers.push((v) =>
          client.decodeReturnValue("getProjectRewardsDao()uint64", v)
        );
        return this;
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams) => {
            promiseChain = promiseChain.then(() =>
              composer.addAppDelete(client.params.delete.bare(params))
            );
            return this;
          },
        };
      },
      get optIn() {
        return {
          optInToApplication: (
            params: CallParams<
              | WeRepoArgs["obj"]["optInToApplication()void"]
              | WeRepoArgs["tuple"]["optInToApplication()void"]
            >
          ) => {
            promiseChain = promiseChain.then(async () =>
              composer.addAppCallMethodCall(
                await client.params.optIn.optInToApplication(params)
              )
            );
            resultMappers.push(undefined);
            return this;
          },
        };
      },
      /**
       * Add a clear state call to the WeRepo contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() =>
          composer.addAppCall(client.params.clearState(params))
        );
        return this;
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() =>
          composer.addTransaction(txn, signer)
        );
        return this;
      },
      async composer() {
        await promiseChain;
        return composer;
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain;
        const result = await (!options
          ? composer.simulate()
          : composer.simulate(options));
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val)
              : val.returnValue
          ),
        };
      },
      async send(params?: SendParams) {
        await promiseChain;
        const result = await composer.send(params);
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val)
              : val.returnValue
          ),
        };
      },
    } as unknown as WeRepoComposer;
  }
}
export type WeRepoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createNewProject(string,string,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProject(
    params?: CallParams<
      | WeRepoArgs["obj"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
      | WeRepoArgs["tuple"]["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
    >
  ): WeRepoComposer<
    [
      ...TReturns,
      (
        | WeRepoReturns["createNewProject(string,string,uint64,uint64,uint64,uint64)void"]
        | undefined
      )
    ]
  >;

  /**
   * Calls the updateProjectName(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProjectName(
    params?: CallParams<
      | WeRepoArgs["obj"]["updateProjectName(string)void"]
      | WeRepoArgs["tuple"]["updateProjectName(string)void"]
    >
  ): WeRepoComposer<
    [...TReturns, WeRepoReturns["updateProjectName(string)void"] | undefined]
  >;

  /**
   * Calls the updateProjectColors(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProjectColors(
    params?: CallParams<
      | WeRepoArgs["obj"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
      | WeRepoArgs["tuple"]["updateProjectColors(uint64,uint64,uint64,uint64)void"]
    >
  ): WeRepoComposer<
    [
      ...TReturns,
      (
        | WeRepoReturns["updateProjectColors(uint64,uint64,uint64,uint64)void"]
        | undefined
      )
    ]
  >;

  /**
   * Calls the createProjectMicroDapp(uint64,uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProjectMicroDapp(
    params?: CallParams<
      | WeRepoArgs["obj"]["createProjectMicroDapp(uint64,uint64,account)void"]
      | WeRepoArgs["tuple"]["createProjectMicroDapp(uint64,uint64,account)void"]
    >
  ): WeRepoComposer<
    [
      ...TReturns,
      (
        | WeRepoReturns["createProjectMicroDapp(uint64,uint64,account)void"]
        | undefined
      )
    ]
  >;

  /**
   * Calls the getProjectName()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProjectName(
    params?: CallParams<
      | WeRepoArgs["obj"]["getProjectName()string"]
      | WeRepoArgs["tuple"]["getProjectName()string"]
    >
  ): WeRepoComposer<
    [...TReturns, WeRepoReturns["getProjectName()string"] | undefined]
  >;

  /**
   * Calls the getDappIdByType(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDappIdByType(
    params?: CallParams<
      | WeRepoArgs["obj"]["getDappIdByType(uint64)uint64"]
      | WeRepoArgs["tuple"]["getDappIdByType(uint64)uint64"]
    >
  ): WeRepoComposer<
    [...TReturns, WeRepoReturns["getDappIdByType(uint64)uint64"] | undefined]
  >;

  /**
   * Calls the getAllDappIds()uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllDappIds(
    params?: CallParams<
      | WeRepoArgs["obj"]["getAllDappIds()uint64[]"]
      | WeRepoArgs["tuple"]["getAllDappIds()uint64[]"]
    >
  ): WeRepoComposer<
    [...TReturns, WeRepoReturns["getAllDappIds()uint64[]"] | undefined]
  >;

  /**
   * Calls the getProjectHoldersDao()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProjectHoldersDao(
    params?: CallParams<
      | WeRepoArgs["obj"]["getProjectHoldersDao()uint64"]
      | WeRepoArgs["tuple"]["getProjectHoldersDao()uint64"]
    >
  ): WeRepoComposer<
    [...TReturns, WeRepoReturns["getProjectHoldersDao()uint64"] | undefined]
  >;

  /**
   * Calls the getProjectRewardsDao()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProjectRewardsDao(
    params?: CallParams<
      | WeRepoArgs["obj"]["getProjectRewardsDao()uint64"]
      | WeRepoArgs["tuple"]["getProjectRewardsDao()uint64"]
    >
  ): WeRepoComposer<
    [...TReturns, WeRepoReturns["getProjectRewardsDao()uint64"] | undefined]
  >;

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the WeRepo smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(
      params?: AppClientBareCallParams
    ): WeRepoComposer<[...TReturns, undefined]>;
  };

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the WeRepo smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(
      params?: CallParams<
        | WeRepoArgs["obj"]["optInToApplication()void"]
        | WeRepoArgs["tuple"]["optInToApplication()void"]
      >
    ): WeRepoComposer<
      [...TReturns, WeRepoReturns["optInToApplication()void"] | undefined]
    >;
  };

  /**
   * Makes a clear_state call to an existing instance of the WeRepo smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    params?: AppClientBareCallParams
  ): WeRepoComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(
    txn: Transaction,
    signer?: TransactionSigner
  ): WeRepoComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<
    WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  simulate(
    options: SkipSignaturesSimulateOptions
  ): Promise<
    WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  simulate(
    options: RawSimulateOptions
  ): Promise<
    WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }
  >;
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WeRepoComposerResults<TReturns>>;
};
export type WeRepoComposerResults<TReturns extends [...any[]]> = Expand<
  SendAtomicTransactionComposerResults & {
    returns: TReturns;
  }
>;
