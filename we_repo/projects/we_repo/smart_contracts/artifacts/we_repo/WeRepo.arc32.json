{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "optInToApplication()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "createNewProject(string,string,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateProjectName(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateProjectColors(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createProjectMicroDapp(uint64,uint64,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getProjectName()string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getDappIdByType(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getAllDappIds()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getProjectHoldersDao()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getProjectRewardsDao()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 4
        }
    },
    "schema": {
        "global": {
            "declared": {
                "manager_address": {
                    "type": "bytes",
                    "key": "manager_address"
                },
                "total_projects": {
                    "type": "uint64",
                    "key": "total_projects"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "project_accent_color": {
                    "type": "uint64",
                    "key": "project_accent_color"
                },
                "project_background_color": {
                    "type": "uint64",
                    "key": "project_background_color"
                },
                "project_primary_color": {
                    "type": "uint64",
                    "key": "project_primary_color"
                },
                "project_secondary_color": {
                    "type": "uint64",
                    "key": "project_secondary_color"
                },
                "project_username": {
                    "type": "bytes",
                    "key": "project_username"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "WeRepo",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "optInToApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createNewProject",
                "args": [
                    {
                        "type": "string",
                        "name": "project_name"
                    },
                    {
                        "type": "string",
                        "name": "project_username"
                    },
                    {
                        "type": "uint64",
                        "name": "background_color"
                    },
                    {
                        "type": "uint64",
                        "name": "primary_color"
                    },
                    {
                        "type": "uint64",
                        "name": "secondary_color"
                    },
                    {
                        "type": "uint64",
                        "name": "accent_color"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateProjectName",
                "args": [
                    {
                        "type": "string",
                        "name": "new_project_name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateProjectColors",
                "args": [
                    {
                        "type": "uint64",
                        "name": "background_color"
                    },
                    {
                        "type": "uint64",
                        "name": "primary_color"
                    },
                    {
                        "type": "uint64",
                        "name": "secondary_color"
                    },
                    {
                        "type": "uint64",
                        "name": "accent_color"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createProjectMicroDapp",
                "args": [
                    {
                        "type": "uint64",
                        "name": "dappId"
                    },
                    {
                        "type": "uint64",
                        "name": "type"
                    },
                    {
                        "type": "account",
                        "name": "creatorAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getProjectName",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "getDappIdByType",
                "args": [
                    {
                        "type": "uint64",
                        "name": "type"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getAllDappIds",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                }
            },
            {
                "name": "getProjectHoldersDao",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getProjectRewardsDao",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "delete_application": "CALL"
    }
}