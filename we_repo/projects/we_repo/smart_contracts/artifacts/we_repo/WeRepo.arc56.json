{
    "name": "WeRepo",
    "structs": {
        "ProjectData": [
            {
                "name": "project_name_des",
                "type": "string"
            },
            {
                "name": "dappIds",
                "type": "uint64[]"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createNewProject",
            "args": [
                {
                    "type": "string",
                    "name": "project_name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateProjectName",
            "args": [
                {
                    "type": "string",
                    "name": "new_project_name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createProjectMicroDapp",
            "args": [
                {
                    "type": "uint64",
                    "name": "dappId"
                },
                {
                    "type": "uint64",
                    "name": "type"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getProjectName",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getDappIdByType",
            "args": [
                {
                    "type": "uint64",
                    "name": "type"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAllDappIds",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getProjectHoldersDao",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getProjectRewardsDao",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "manager_address": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bWFuYWdlcl9hZGRyZXNz"
                },
                "total_projects": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcHJvamVjdHM="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "project": {
                    "keyType": "address",
                    "valueType": "ProjectData",
                    "prefix": "X3A="
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        393,
                        477,
                        591,
                        664,
                        693,
                        722,
                        778,
                        803,
                        844
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        647
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        121,
                        137,
                        153,
                        169,
                        190,
                        214,
                        234,
                        252,
                        270
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        460
                    ],
                    "errorMessage": "Project created by the given address does not exist"
                },
                {
                    "pc": [
                        687,
                        716,
                        772,
                        797,
                        838
                    ],
                    "errorMessage": "Project does not exist"
                },
                {
                    "pc": [
                        274
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        124,
                        140,
                        156,
                        172,
                        193,
                        217,
                        237,
                        255
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        370,
                        580
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAECCCYEAl9wBBUffHUOdG90YWxfcHJvamVjdHMIAAAAAAAAAAAxG0EARoIJBLhEezYEthE9xwT4ORi6BIJGxSUEJVf2ZATqY4lyBOmJRFAEjcCyPgQdd8nxNhoAjgkAlwCFAHMAXwBHADIAIgASAAIiQzEZFEQxGESIArwpTFCwI0MxGRREMRhEiAKDKUxQsCNDMRkURDEYRIgCXSlMULAjQzEZFEQxGEQ2GgEXiAIOFilMULAjQzEZFEQxGESIAeNJFRZXBgJMUClMULAjQzEZFEQxGEQ2GgEXNhoCF4gBMSNDMRkURDEYRDYaAVcCAIgAyyNDMRkURDEYRDYaAVcCAIgAJyNDMRkURDEYFESIAAIjQ4APbWFuYWdlcl9hZGRyZXNzMQBnKiJniYoBACgxAFC9RQFAADwoMQBQgfQDuUiL/xUWVwYCi/9QSRWBBAgWVwYCgAIABExQTFCAAgAAUCgxAFBJvEhMvyIqZUQjCCpMZ4mL/xUWVwYCi/9QKDEAUEm+REkiWUsBIksCWEsCJFlLAxVPBEsCTwJSTwJLBVBMUExPAglPAxVLAiRZCEwJFlcGAlwCSwG8SL+JigEAKDEAUL1FAUSL/xUWVwYCi/9QKDEAUEm+REkiWUsBIksCWEsCJFlLAxVPBEsCTwJSTwJLBVBMUExPAglPAxVLAiRZCEwJFlcGAlwCSwG8SL+JigIAIoAAKDEAUL1FAUAAJCgxAFCB9AO5SCgxAFBJvEiACAAEAAYAAAAAvyIqZUQjCCpMZygxAFC+REkkWUsBFVKMAIsAIllJjAGL/wxBABaLAFcCACtQSRUlChZXBgJMUIwAQv/di/4Wi/8jCUmLAQxEJQskCIsATE8CXSgxAFBJvkRJJFkiTFhPAlBLAbxIv4koMQBQvUUBRCgxAFC+REkiWUsBJFlSVwIAiYoBASgxAFC9RQFEKDEAUL5ESSRZSwEVUov/Ig5AAAqLACJZi/8MQQADIkyJi/8jCYsAVwIATCULW0yJKDEAUL1FAUQoMQBQvkRJJFlLARVSiYoAASgxAFC9RQFEKDEAUL5ESSRZSwEVUkkiWUEAB4sAVwIITIkrQv/6igABKDEAUL1FAUQoMQBQvkRJJFlLARVSSSJZJA9BAAeLAFcKCEyJK0L/+g==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}