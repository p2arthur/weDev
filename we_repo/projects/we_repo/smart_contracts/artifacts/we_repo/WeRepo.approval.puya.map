{
  "version": 3,
  "sources": [
    "/home/arthur/Documents/retreat/WeDev/we_repo/projects/we_repo/smart_contracts/we_repo/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2JG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAhIH;;;AAAA;AAgIG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AA1FH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AA0FG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA3EH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA2EG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAnEH;;;AAAA;;;AAmEG;;;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AA/BH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+BG;;;AAAA;;AAHD;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAZC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAhBH;;AAAA;;AAAA;;;;AAAA;;;AAyBG;;AAAA;AAAA;;AAvBD;;;;;;;;;;;;;;;;;AAiBmC;;AAAjC;AAdF;AAiB8B;AAA5B;;AASF;;;AAvBsD;AAiC9B;;AAjC8B;AAiCtB;AAAA;;AAA1B;;;AAjCgD;AAmCjC;;AAnCiC;AAmCV;;;AAAxC;;AAOgB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAJiB;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAtCiB;AAsCjC;;AAtCiC;AAsClD;AAAA;;AAAA;AAAA;AAO0B;;AA3C9B;;AA2CI;;AAAA;AACkC;;AA3CtC;;AA2CI;;AAAA;AAC+B;;AA3CnC;;AA2CI;;AAAA;AACiC;;AA3CrC;;AA2CI;;AAAA;AAC8B;;AA3ClC;;AA2CI;;AAAA;AApDJ;AAAA;AAAA;AAAA;AAuDmE;AAA5B;AAvDvC;AAuDI;AAAA;;AAG8C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAvDI;AAuDjC;;AAvDiC;AAuDzB;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAIJ;;;AA3DsD;AA8D5B;;AA9D4B;AA8DpB;AAAA;;AAAhC;AAE8C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAhEM;AAgEnC;;AAhEmC;AAgE3B;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAGF;;;AAQmC;;AAA1B;AAzET;;AAyE2C;AAAA;;AAAzC;AACkC;;AAzEpC;;AAyEE;;AAAA;AAC+B;;AAzEjC;;AAyEE;;AAAA;AACiC;;AAzEnC;;AAyEE;;AAAA;AAC8B;;AAzEhC;;AAyEE;;AAAA;;AAGF;;;;;;AAlFsD;AAqF9B;;AArF8B;AAqFtB;AAAA;;AAA1B;;;AArFgD;AAuFjC;;AAvFiC;AAuFV;;;AAAxC;;AAvFkD;AA2FM;;AA3FN;AA2Fc;AAAA;AAAM;AAAmB;AAAS;;AAA3D;AAAjB;AA3F4B;AA4FQ;;AA5FR;AA4FgB;AAAA;AAAM;;AAAqB;AAAS;;AAA7D;AAAjB;AAJS;AAAA;;;;AAAA;AAAA;;;;AAAA;AAEtB;;AAFsB;AACjB;;AADiB;AAxFiB;AAwFjC;;AAxFiC;AAwFlD;AAAA;;AAAA;AAAA;AA3FJ;AAAA;AAAA;AAAA;AAmGmE;AAA5B;AAnGvC;AAmGI;AAAA;AAhGkD;AAAA;;AAAA;AAoGP;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGpC;;AAAA;AAAA;AAAA;AAAA;;AAAR;;AAAA;AAAP;;;AACE;;AAAA;;;AAAa;AAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;AAIkB;;AAAA;AAAZ;;AAAO;AAAP;AAAR;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA5GoD;AA+GnC;;AA/GmC;AA+G3B;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AA/GoD;AAoH5B;;AApH4B;AAoHpB;AAAA;;AAAhC;AApHoD;AAqH5B;;AArH4B;AAqHpB;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAa;;;AAAnD;AAGF;;;AAxHsD;AA0H5B;;AA1H4B;AA0HpB;AAAA;;AAAhC;AA1HoD;AA2HnB;;AA3HmB;AA2HX;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAG3C;;AAAQ;AAAR;AAAA;;;AAA4B;;AAAA;AAAA;AAAf;;AAAA;AAAb;;;AACK;AAAP;AAAA;AAGa;;AAAO;AAAP;AAAR;;AAAA;;;AAAA;AAAA;;AAAA;AAAkB;AAAzB;AAAA;AAlIoD;AAuI5B;;AAvI4B;AAuIpB;AAAA;;AAAhC;AAvIoD;AAwI5B;;AAxI4B;AAwIpB;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAtC;AAIF;;;AA5IsD;AA8I5B;;AA9I4B;AA8IpB;AAAA;;AAAhC;AA9IoD;AA+InB;;AA/ImB;AA+IX;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChC;AAAA;AAAR;;;AAAsB;;AAAA;;;AAA7B;AAAA;AAA0C;;;;AAG5C;;;AAnJsD;AAqJ5B;;AArJ4B;AAqJpB;AAAA;;AAAhC;AArJoD;AAsJnB;;AAtJmB;AAsJX;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChC;AAAA;AAAU;;AAAlB;AAAA;;;AAAsB;;AAAA;;;AAA7B;AAAA;AAA0C;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 18 16"
    },
    "7": {
      "op": "bytecblock \"_p\" 0x151f7c75 \"total_projects\" 0x0000000000000000 \"project_username\" \"project_background_color\" \"project_primary_color\" \"project_secondary_color\" \"project_accent_color\" 0x0000"
    },
    "153": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "155": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "158": {
      "op": "pushbytess 0xb8447b36 0x01a3a3ff 0xc44bd7ad 0xf83918ba 0x1bfcb938 0xe39a499e 0x2557f664 0xea638972 0xe9894450 0x8dc0b23e 0x1d77c9f1 // method \"createApplication()void\", method \"optInToApplication()void\", method \"createNewProject(string,string,uint64,uint64,uint64,uint64)void\", method \"updateProjectName(string)void\", method \"updateProjectColors(uint64,uint64,uint64,uint64)void\", method \"createProjectMicroDapp(uint64,uint64,account)void\", method \"getProjectName()string\", method \"getDappIdByType(uint64)uint64\", method \"getAllDappIds()uint64[]\", method \"getProjectHoldersDao()uint64\", method \"getProjectRewardsDao()uint64\"",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(createNewProject(string,string,uint64,uint64,uint64,uint64)void)",
        "Method(createProjectMicroDapp(uint64,uint64,account)void)",
        "Method(getAllDappIds()uint64[])",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectName()string)",
        "Method(getProjectRewardsDao()uint64)",
        "Method(optInToApplication()void)",
        "Method(updateProjectColors(uint64,uint64,uint64,uint64)void)",
        "Method(updateProjectName(string)void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(optInToApplication()void)",
        "Method(createNewProject(string,string,uint64,uint64,uint64,uint64)void)",
        "Method(updateProjectName(string)void)",
        "Method(updateProjectColors(uint64,uint64,uint64,uint64)void)",
        "Method(createProjectMicroDapp(uint64,uint64,account)void)",
        "Method(getProjectName()string)",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getAllDappIds()uint64[])",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectRewardsDao()uint64)"
      ]
    },
    "215": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(createNewProject(string,string,uint64,uint64,uint64,uint64)void)",
        "Method(createProjectMicroDapp(uint64,uint64,account)void)",
        "Method(getAllDappIds()uint64[])",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectName()string)",
        "Method(getProjectRewardsDao()uint64)",
        "Method(optInToApplication()void)",
        "Method(updateProjectColors(uint64,uint64,uint64,uint64)void)",
        "Method(updateProjectName(string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(optInToApplication()void)",
        "Method(createNewProject(string,string,uint64,uint64,uint64,uint64)void)",
        "Method(updateProjectName(string)void)",
        "Method(updateProjectColors(uint64,uint64,uint64,uint64)void)",
        "Method(createProjectMicroDapp(uint64,uint64,account)void)",
        "Method(getProjectName()string)",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getAllDappIds()uint64[])",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectRewardsDao()uint64)",
        "tmp%2#0"
      ]
    },
    "218": {
      "op": "match main_createApplication_route@3 main_optInToApplication_route@4 main_createNewProject_route@5 main_updateProjectName_route@6 main_updateProjectColors_route@7 main_createProjectMicroDapp_route@8 main_getProjectName_route@9 main_getDappIdByType_route@10 main_getAllDappIds_route@11 main_getProjectHoldersDao_route@12 main_getProjectRewardsDao_route@13",
      "stack_out": []
    },
    "242": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "243": {
      "op": "return",
      "stack_out": []
    },
    "244": {
      "block": "main_getProjectRewardsDao_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "246": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "247": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "248": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "250": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "251": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectRewardsDao",
      "op": "callsub getProjectRewardsDao",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "254": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "0x151f7c75"
      ]
    },
    "255": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%72#0"
      ]
    },
    "256": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "257": {
      "op": "log",
      "stack_out": []
    },
    "258": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "op": "return",
      "stack_out": []
    },
    "260": {
      "block": "main_getProjectHoldersDao_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "262": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "263": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "264": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "266": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "267": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectHoldersDao",
      "op": "callsub getProjectHoldersDao",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "270": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "0x151f7c75"
      ]
    },
    "271": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%66#0"
      ]
    },
    "272": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "273": {
      "op": "log",
      "stack_out": []
    },
    "274": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "275": {
      "op": "return",
      "stack_out": []
    },
    "276": {
      "block": "main_getAllDappIds_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "278": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "279": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "280": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "282": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "283": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getAllDappIds",
      "op": "callsub getAllDappIds",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "286": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "0x151f7c75"
      ]
    },
    "287": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%60#0"
      ]
    },
    "288": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "289": {
      "op": "log",
      "stack_out": []
    },
    "290": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "291": {
      "op": "return",
      "stack_out": []
    },
    "292": {
      "block": "main_getDappIdByType_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "294": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "295": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "296": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "298": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "299": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "302": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "303": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getDappIdByType",
      "op": "callsub getDappIdByType",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "306": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "307": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "309": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "310": {
      "op": "log",
      "stack_out": []
    },
    "311": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "return",
      "stack_out": []
    },
    "313": {
      "block": "main_getProjectName_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "315": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "316": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "317": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "319": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "320": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectName",
      "op": "callsub getProjectName",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "323": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "324": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "325": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "326": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "329": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "331": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "332": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "334": {
      "op": "log",
      "stack_out": []
    },
    "335": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "336": {
      "op": "return",
      "stack_out": []
    },
    "337": {
      "block": "main_createProjectMicroDapp_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "339": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "340": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "341": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "343": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "344": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "347": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "348": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "351": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "352": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "355": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "356": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%44#0"
      ]
    },
    "358": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createProjectMicroDapp",
      "op": "callsub createProjectMicroDapp",
      "stack_out": []
    },
    "361": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "362": {
      "op": "return",
      "stack_out": []
    },
    "363": {
      "block": "main_updateProjectColors_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "365": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "366": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "367": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "369": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "370": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "373": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "374": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "377": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "378": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "381": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "382": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "385": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "386": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.updateProjectColors",
      "op": "callsub updateProjectColors",
      "stack_out": []
    },
    "389": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "390": {
      "op": "return",
      "stack_out": []
    },
    "391": {
      "block": "main_updateProjectName_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "393": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "394": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "395": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "397": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "398": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "401": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "404": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.updateProjectName",
      "op": "callsub updateProjectName",
      "stack_out": []
    },
    "407": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "return",
      "stack_out": []
    },
    "409": {
      "block": "main_createNewProject_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "411": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "412": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "413": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "415": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "416": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "419": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "422": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "425": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "428": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "431": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "432": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "435": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "436": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "439": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "440": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "443": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "444": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createNewProject",
      "op": "callsub createNewProject",
      "stack_out": []
    },
    "447": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "block": "main_optInToApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "451": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "OptIn"
      ]
    },
    "452": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "453": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "457": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "458": {
      "op": "return",
      "stack_out": []
    },
    "459": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "461": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "462": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "463": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "465": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "466": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "467": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createApplication",
      "op": "callsub createApplication"
    },
    "470": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "471": {
      "op": "return",
      "stack_out": []
    },
    "472": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "474": {
      "op": "txn OnCompletion",
      "defined_out": [
        "5",
        "tmp%74#0"
      ],
      "stack_out": [
        "5",
        "tmp%74#0"
      ]
    },
    "476": {
      "op": "match main_deleteApplication@17",
      "stack_out": []
    },
    "480": {
      "op": "b main_after_if_else@20"
    },
    "483": {
      "block": "main_deleteApplication@17",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "485": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "486": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "487": {
      "op": "return",
      "stack_out": []
    },
    "488": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "pushbytes \"manager_address\"",
      "defined_out": [
        "\"manager_address\""
      ],
      "stack_out": [
        "\"manager_address\""
      ]
    },
    "505": {
      "op": "txn Sender",
      "defined_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ]
    },
    "507": {
      "op": "app_global_put",
      "stack_out": []
    },
    "508": {
      "op": "bytec_2 // \"total_projects\"",
      "defined_out": [
        "\"total_projects\""
      ],
      "stack_out": [
        "\"total_projects\""
      ]
    },
    "509": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"total_projects\"",
        "0"
      ],
      "stack_out": [
        "\"total_projects\"",
        "0"
      ]
    },
    "510": {
      "op": "app_global_put",
      "stack_out": []
    },
    "511": {
      "retsub": true,
      "op": "retsub"
    },
    "512": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createNewProject",
      "params": {
        "project_name#0": "bytes",
        "project_username#0": "bytes",
        "background_color#0": "uint64",
        "primary_color#0": "uint64",
        "secondary_color#0": "uint64",
        "accent_color#0": "uint64"
      },
      "block": "createNewProject",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "515": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "516": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "518": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "519": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "520": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "522": {
      "op": "bnz createNewProject_else_body@2",
      "stack_out": []
    },
    "525": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "526": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "528": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "529": {
      "op": "pushint 500 // 500",
      "defined_out": [
        "500",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "500"
      ]
    },
    "532": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "533": {
      "op": "pop",
      "stack_out": []
    },
    "534": {
      "op": "frame_dig -6",
      "defined_out": [
        "project_name#0 (copy)"
      ],
      "stack_out": [
        "project_name#0 (copy)"
      ]
    },
    "536": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "537": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "538": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "541": {
      "op": "frame_dig -6",
      "stack_out": [
        "length_uint16%0#0",
        "project_name#0 (copy)"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "544": {
      "op": "pushbytes 0x00000000000000010000000000000001001400160000",
      "defined_out": [
        "0x00000000000000010000000000000001001400160000",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x00000000000000010000000000000001001400160000"
      ]
    },
    "568": {
      "op": "swap",
      "stack_out": [
        "0x00000000000000010000000000000001001400160000",
        "encoded_value%0#0"
      ]
    },
    "569": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "570": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "\"_p\""
      ]
    },
    "571": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "encoded_tuple_buffer%6#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "\"_p\"",
        "tmp%4#0"
      ]
    },
    "573": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%5#0"
      ]
    },
    "574": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "575": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%5#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "576": {
      "op": "pop",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%5#0"
      ]
    },
    "577": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "578": {
      "op": "box_put",
      "stack_out": []
    },
    "579": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "581": {
      "op": "bytec 4 // \"project_username\"",
      "defined_out": [
        "\"project_username\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"project_username\""
      ]
    },
    "583": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"project_username\"",
        "project_username#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "\"project_username\"",
        "project_username#0 (copy)"
      ]
    },
    "585": {
      "op": "app_local_put",
      "stack_out": []
    },
    "586": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "588": {
      "op": "bytec 5 // \"project_background_color\"",
      "defined_out": [
        "\"project_background_color\"",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "\"project_background_color\""
      ]
    },
    "590": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"project_background_color\"",
        "background_color#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "\"project_background_color\"",
        "background_color#0 (copy)"
      ]
    },
    "592": {
      "op": "app_local_put",
      "stack_out": []
    },
    "593": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "595": {
      "op": "bytec 6 // \"project_primary_color\"",
      "defined_out": [
        "\"project_primary_color\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"project_primary_color\""
      ]
    },
    "597": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"project_primary_color\"",
        "primary_color#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"project_primary_color\"",
        "primary_color#0 (copy)"
      ]
    },
    "599": {
      "op": "app_local_put",
      "stack_out": []
    },
    "600": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "602": {
      "op": "bytec 7 // \"project_secondary_color\"",
      "defined_out": [
        "\"project_secondary_color\"",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "\"project_secondary_color\""
      ]
    },
    "604": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"project_secondary_color\"",
        "secondary_color#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "\"project_secondary_color\"",
        "secondary_color#0 (copy)"
      ]
    },
    "606": {
      "op": "app_local_put",
      "stack_out": []
    },
    "607": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "609": {
      "op": "bytec 8 // \"project_accent_color\"",
      "defined_out": [
        "\"project_accent_color\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"project_accent_color\""
      ]
    },
    "611": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"project_accent_color\"",
        "accent_color#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"project_accent_color\"",
        "accent_color#0 (copy)"
      ]
    },
    "613": {
      "op": "app_local_put",
      "stack_out": []
    },
    "614": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "615": {
      "op": "bytec_2 // \"total_projects\"",
      "defined_out": [
        "\"total_projects\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_projects\""
      ]
    },
    "616": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "617": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "618": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "619": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "620": {
      "op": "bytec_2 // \"total_projects\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_projects\""
      ]
    },
    "621": {
      "op": "swap",
      "stack_out": [
        "\"total_projects\"",
        "new_state_value%0#0"
      ]
    },
    "622": {
      "op": "app_global_put",
      "stack_out": []
    },
    "623": {
      "retsub": true,
      "op": "retsub"
    },
    "624": {
      "block": "createNewProject_else_body@2",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "project_name#0 (copy)"
      ],
      "stack_out": [
        "project_name#0 (copy)"
      ]
    },
    "626": {
      "op": "len",
      "defined_out": [
        "length%1#0"
      ],
      "stack_out": [
        "length%1#0"
      ]
    },
    "627": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0"
      ],
      "stack_out": [
        "as_bytes%3#0"
      ]
    },
    "628": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0"
      ],
      "stack_out": [
        "length_uint16%1#0"
      ]
    },
    "631": {
      "op": "frame_dig -6",
      "stack_out": [
        "length_uint16%1#0",
        "project_name#0 (copy)"
      ]
    },
    "633": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "634": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "\"_p\""
      ]
    },
    "635": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "encoded_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "\"_p\"",
        "tmp%11#0"
      ]
    },
    "637": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0"
      ]
    },
    "638": {
      "op": "dup",
      "defined_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "639": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%1#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "640": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "maybe_value%2#0"
      ]
    },
    "641": {
      "op": "dup",
      "defined_out": [
        "encoded_value%1#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "642": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "encoded_value%1#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "18"
      ]
    },
    "643": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_value%1#0",
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "item_offset%0#0"
      ]
    },
    "644": {
      "op": "intc_1 // 0"
    },
    "645": {
      "op": "swap",
      "defined_out": [
        "0",
        "encoded_value%1#0",
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "maybe_value%2#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "646": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "encoded_value%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%12#0",
        "data_up_to_item%0#0"
      ]
    },
    "647": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%12#0",
        "data_up_to_item%0#0",
        "encoded_value%1#0"
      ]
    },
    "649": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "updated_data%0#0"
      ]
    },
    "650": {
      "op": "dig 1",
      "stack_out": [
        "tmp%12#0",
        "updated_data%0#0",
        "tmp%12#0 (copy)"
      ]
    },
    "652": {
      "op": "box_del",
      "defined_out": [
        "tmp%12#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%12#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "653": {
      "op": "pop",
      "stack_out": [
        "tmp%12#0",
        "updated_data%0#0"
      ]
    },
    "654": {
      "op": "box_put",
      "stack_out": []
    },
    "655": {
      "retsub": true,
      "op": "retsub"
    },
    "656": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.updateProjectName",
      "params": {
        "new_project_name#0": "bytes"
      },
      "block": "updateProjectName",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "659": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "660": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "662": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "663": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "664": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "666": {
      "error": "Project created by the given address does not exist",
      "op": "assert // Project created by the given address does not exist",
      "stack_out": []
    },
    "667": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_project_name#0 (copy)"
      ],
      "stack_out": [
        "new_project_name#0 (copy)"
      ]
    },
    "669": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "670": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "671": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "674": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_uint16%0#0",
        "new_project_name#0 (copy)"
      ]
    },
    "676": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "677": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "encoded_value%0#0",
        "\"_p\""
      ]
    },
    "678": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "encoded_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "680": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0"
      ]
    },
    "681": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "682": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "683": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "684": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "685": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "encoded_value%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "18"
      ]
    },
    "686": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_value%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "item_offset%0#0"
      ]
    },
    "687": {
      "op": "intc_1 // 0"
    },
    "688": {
      "op": "swap",
      "defined_out": [
        "0",
        "encoded_value%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "689": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "data_up_to_item%0#0"
      ]
    },
    "690": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "data_up_to_item%0#0",
        "encoded_value%0#0"
      ]
    },
    "692": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "693": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "695": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "696": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "697": {
      "op": "box_put",
      "stack_out": []
    },
    "698": {
      "retsub": true,
      "op": "retsub"
    },
    "699": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.updateProjectColors",
      "params": {
        "background_color#0": "uint64",
        "primary_color#0": "uint64",
        "secondary_color#0": "uint64",
        "accent_color#0": "uint64"
      },
      "block": "updateProjectColors",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "702": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "704": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "705": {
      "op": "bytec 4 // \"project_username\"",
      "defined_out": [
        "\"project_username\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"project_username\""
      ]
    },
    "707": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "708": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "710": {
      "error": "User has not opted in to the contract",
      "op": "assert // User has not opted in to the contract",
      "stack_out": []
    },
    "711": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "713": {
      "op": "bytec 5 // \"project_background_color\"",
      "defined_out": [
        "\"project_background_color\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"project_background_color\""
      ]
    },
    "715": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"project_background_color\"",
        "background_color#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"project_background_color\"",
        "background_color#0 (copy)"
      ]
    },
    "717": {
      "op": "app_local_put",
      "stack_out": []
    },
    "718": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "720": {
      "op": "bytec 6 // \"project_primary_color\"",
      "defined_out": [
        "\"project_primary_color\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"project_primary_color\""
      ]
    },
    "722": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"project_primary_color\"",
        "primary_color#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"project_primary_color\"",
        "primary_color#0 (copy)"
      ]
    },
    "724": {
      "op": "app_local_put",
      "stack_out": []
    },
    "725": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "727": {
      "op": "bytec 7 // \"project_secondary_color\"",
      "defined_out": [
        "\"project_secondary_color\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"project_secondary_color\""
      ]
    },
    "729": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"project_secondary_color\"",
        "secondary_color#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"project_secondary_color\"",
        "secondary_color#0 (copy)"
      ]
    },
    "731": {
      "op": "app_local_put",
      "stack_out": []
    },
    "732": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "734": {
      "op": "bytec 8 // \"project_accent_color\"",
      "defined_out": [
        "\"project_accent_color\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"project_accent_color\""
      ]
    },
    "736": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"project_accent_color\"",
        "accent_color#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "\"project_accent_color\"",
        "accent_color#0 (copy)"
      ]
    },
    "738": {
      "op": "app_local_put",
      "stack_out": []
    },
    "739": {
      "retsub": true,
      "op": "retsub"
    },
    "740": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createProjectMicroDapp",
      "params": {
        "dappId#0": "uint64",
        "type#0": "uint64",
        "creatorAddress#0": "bytes"
      },
      "block": "createProjectMicroDapp",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "743": {
      "op": "intc_1 // 0",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "744": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "746": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\""
      ]
    },
    "747": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "749": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%1#0"
      ]
    },
    "750": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "751": {
      "op": "bury 1",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_exists%0#0"
      ]
    },
    "753": {
      "op": "bnz createProjectMicroDapp_after_if_else@2",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "756": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\""
      ]
    },
    "757": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "759": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%3#0"
      ]
    },
    "760": {
      "op": "pushint 500 // 500",
      "defined_out": [
        "500",
        "tmp%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%3#0",
        "500"
      ]
    },
    "763": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "{box_create}"
      ]
    },
    "764": {
      "op": "pop",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "765": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\""
      ]
    },
    "766": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\"",
        "tmp%4#0"
      ]
    },
    "768": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%5#0"
      ]
    },
    "769": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "770": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%1#0"
      ]
    },
    "771": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "772": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%7#0"
      ]
    },
    "773": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%7#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%7#0",
        "5"
      ]
    },
    "775": {
      "op": "+",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "to_encode%0#0"
      ]
    },
    "776": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0"
      ]
    },
    "777": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "778": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%8#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "\"_p\"",
        "tmp%8#0"
      ]
    },
    "780": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "tmp%9#0"
      ]
    },
    "781": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "782": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0"
      ]
    },
    "783": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "maybe_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "8"
      ]
    },
    "785": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%11#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "tmp%11#0"
      ]
    },
    "786": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "tmp%11#0",
        "5"
      ]
    },
    "788": {
      "op": "+",
      "defined_out": [
        "to_encode%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "to_encode%1#0"
      ]
    },
    "789": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "790": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "791": {
      "op": "pushbytes 0x0014",
      "defined_out": [
        "0x0014",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%2#0",
        "0x0014"
      ]
    },
    "795": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "796": {
      "op": "pushbytes 0x0016",
      "defined_out": [
        "0x0016",
        "encoded_tuple_buffer%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%3#0",
        "0x0016"
      ]
    },
    "800": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "801": {
      "op": "bytec 9 // 0x0000",
      "defined_out": [
        "0x0000",
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%4#0",
        "0x0000"
      ]
    },
    "803": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "804": {
      "op": "bytec 9 // 0x0000",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%5#0",
        "0x0000"
      ]
    },
    "806": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "807": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0",
        "\"_p\""
      ]
    },
    "808": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "encoded_tuple_buffer%6#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0",
        "\"_p\"",
        "tmp%12#0"
      ]
    },
    "810": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0",
        "tmp%13#0"
      ]
    },
    "811": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "812": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%13#0",
        "{box_del}"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0",
        "tmp%13#0",
        "{box_del}"
      ]
    },
    "813": {
      "op": "pop",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "encoded_tuple_buffer%6#0",
        "tmp%13#0"
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%13#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "815": {
      "op": "box_put",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "816": {
      "op": "intc_1 // 0",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "0"
      ]
    },
    "817": {
      "op": "bytec_2 // \"total_projects\"",
      "defined_out": [
        "\"total_projects\"",
        "0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "0",
        "\"total_projects\""
      ]
    },
    "818": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "819": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%3#0"
      ]
    },
    "820": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "821": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "new_state_value%0#0"
      ]
    },
    "822": {
      "op": "bytec_2 // \"total_projects\"",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "new_state_value%0#0",
        "\"total_projects\""
      ]
    },
    "823": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"total_projects\"",
        "new_state_value%0#0"
      ]
    },
    "824": {
      "op": "app_global_put",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "825": {
      "block": "createProjectMicroDapp_after_if_else@2",
      "stack_in": [
        "dappIds#0",
        "tmp%16#0"
      ],
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\""
      ]
    },
    "826": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"_p\"",
        "creatorAddress#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "\"_p\"",
        "creatorAddress#0 (copy)"
      ]
    },
    "828": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%14#0"
      ]
    },
    "829": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "830": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0"
      ]
    },
    "831": {
      "op": "dup",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)"
      ]
    },
    "832": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)",
        "16"
      ]
    },
    "833": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0",
        "item_start_offset%0#0"
      ]
    },
    "834": {
      "op": "dig 1",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0",
        "item_start_offset%0#0",
        "maybe_value%4#0 (copy)"
      ]
    },
    "836": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "item_start_offset%0#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0",
        "item_start_offset%0#0",
        "maybe_value%4#0 (copy)",
        "18"
      ]
    },
    "837": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "maybe_value%4#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "838": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0"
      ]
    },
    "839": {
      "op": "frame_bury 0",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "841": {
      "block": "createProjectMicroDapp_while_top@3",
      "stack_in": [
        "dappIds#0",
        "tmp%16#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0"
      ]
    },
    "843": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "0"
      ]
    },
    "844": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%16#0"
      ]
    },
    "845": {
      "op": "dup",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%16#0",
        "tmp%16#0"
      ]
    },
    "846": {
      "op": "frame_bury 1",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%16#0"
      ]
    },
    "848": {
      "op": "frame_dig -2",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0",
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%16#0",
        "type#0 (copy)"
      ]
    },
    "850": {
      "op": "<",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "851": {
      "op": "bz createProjectMicroDapp_after_while@5",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "854": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0"
      ]
    },
    "856": {
      "op": "extract 2 0",
      "defined_out": [
        "dappIds#0",
        "expr_value_trimmed%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "859": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "dappIds#0",
        "expr_value_trimmed%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "expr_value_trimmed%0#0",
        "0x0000000000000000"
      ]
    },
    "860": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "concatenated%0#0"
      ]
    },
    "861": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "862": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "863": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0",
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "865": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "dappIds#0",
        "len_%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "866": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%0#0",
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "concatenated%0#0",
        "as_bytes%2#0"
      ]
    },
    "867": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "dappIds#0",
        "len_16_bit%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "870": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "871": {
      "op": "concat",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0"
      ]
    },
    "872": {
      "op": "frame_bury 0",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "874": {
      "op": "b createProjectMicroDapp_while_top@3"
    },
    "877": {
      "block": "createProjectMicroDapp_after_while@5",
      "stack_in": [
        "dappIds#0",
        "tmp%16#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "dappId#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappId#0 (copy)"
      ]
    },
    "879": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0"
      ]
    },
    "880": {
      "op": "frame_dig -2",
      "defined_out": [
        "type#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "type#0 (copy)"
      ]
    },
    "882": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "type#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "type#0 (copy)",
        "1"
      ]
    },
    "883": {
      "op": "-",
      "defined_out": [
        "tmp%18#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "tmp%18#0"
      ]
    },
    "884": {
      "op": "dup",
      "defined_out": [
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)"
      ]
    },
    "885": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%16#0"
      ]
    },
    "887": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%0#0",
        "tmp%16#0",
        "tmp%18#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "tmp%18#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "888": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "tmp%18#0"
      ]
    },
    "889": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%16#0",
        "tmp%18#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "tmp%18#0",
        "8"
      ]
    },
    "891": {
      "op": "*",
      "defined_out": [
        "tmp%16#0",
        "val_as_bytes%2#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "write_offset%0#0"
      ]
    },
    "892": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "write_offset%0#0",
        "2"
      ]
    },
    "894": {
      "op": "+",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "write_offset%0#0"
      ]
    },
    "895": {
      "op": "frame_dig 0",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "write_offset%0#0",
        "dappIds#0"
      ]
    },
    "897": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "val_as_bytes%2#0",
        "dappIds#0",
        "write_offset%0#0"
      ]
    },
    "898": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "write_offset%0#0",
        "val_as_bytes%2#0"
      ]
    },
    "900": {
      "op": "replace3",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0"
      ]
    },
    "901": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "dappIds#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "\"_p\""
      ]
    },
    "902": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "dappIds#0",
        "tmp%16#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "\"_p\"",
        "tmp%19#0"
      ]
    },
    "904": {
      "op": "concat",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0"
      ]
    },
    "905": {
      "op": "dup",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "tmp%20#0 (copy)"
      ]
    },
    "906": {
      "op": "box_get",
      "defined_out": [
        "dappIds#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "907": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0"
      ]
    },
    "908": {
      "op": "dup",
      "defined_out": [
        "dappIds#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "909": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "dappIds#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "16"
      ]
    },
    "910": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0"
      ]
    },
    "911": {
      "op": "dig 1",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "913": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "dappIds#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "maybe_value%5#0 (copy)",
        "0"
      ]
    },
    "914": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "dappIds#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "maybe_value%5#0 (copy)",
        "0",
        "item_offset%0#0 (copy)"
      ]
    },
    "916": {
      "op": "extract3",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "917": {
      "op": "dig 2",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "919": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "maybe_value%5#0 (copy)",
        "18"
      ]
    },
    "920": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "next_item_offset%0#0",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0"
      ]
    },
    "921": {
      "op": "dig 3",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "923": {
      "op": "len",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "next_item_offset%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "maybe_value%5#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0"
      ]
    },
    "924": {
      "op": "uncover 4",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "maybe_value%5#0"
      ]
    },
    "926": {
      "op": "dig 2",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%5#0",
        "next_item_offset%0#0",
        "next_item_offset%0#0 (copy)",
        "tmp%16#0",
        "tmp%20#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "maybe_value%5#0",
        "next_item_offset%0#0 (copy)"
      ]
    },
    "928": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "maybe_value%5#0",
        "next_item_offset%0#0 (copy)",
        "total_data_length%0#0"
      ]
    },
    "930": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "931": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "933": {
      "op": "dig 5",
      "defined_out": [
        "dappIds#0",
        "dappIds#0 (copy)",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%16#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "dappIds#0 (copy)"
      ]
    },
    "935": {
      "op": "concat",
      "defined_out": [
        "dappIds#0",
        "data_beyond_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "updated_data%0#0"
      ]
    },
    "936": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "937": {
      "op": "concat",
      "defined_out": [
        "dappIds#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%1#0"
      ]
    },
    "938": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "item_offset%0#0",
        "updated_data%1#0",
        "next_item_offset%0#0"
      ]
    },
    "939": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "updated_data%1#0",
        "next_item_offset%0#0",
        "item_offset%0#0"
      ]
    },
    "941": {
      "op": "-",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "dappIds#0",
        "tmp%20#0",
        "updated_data%1#0",
        "item_length%0#0"
      ]
    },
    "942": {
      "op": "uncover 3",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "item_length%0#0",
        "dappIds#0"
      ]
    },
    "944": {
      "op": "len",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0"
      ]
    },
    "945": {
      "op": "dig 2",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "updated_data%1#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)"
      ]
    },
    "947": {
      "op": "intc_2 // 18",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)",
        "18"
      ]
    },
    "948": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0"
      ]
    },
    "949": {
      "op": "+",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "tail_offset%1#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "item_length%0#0",
        "tail_offset%1#0"
      ]
    },
    "950": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "tail_offset%1#0",
        "item_length%0#0"
      ]
    },
    "951": {
      "op": "-",
      "defined_out": [
        "dappIds#0",
        "tail_offset%2#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "tail_offset%2#0"
      ]
    },
    "952": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "as_bytes%3#0"
      ]
    },
    "953": {
      "op": "extract 6 2",
      "defined_out": [
        "dappIds#0",
        "tail_offset_bytes%0#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%1#0",
        "tail_offset_bytes%0#0"
      ]
    },
    "956": {
      "op": "replace2 18",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%2#0"
      ]
    },
    "958": {
      "op": "dig 1",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%2#0",
        "tmp%20#0 (copy)"
      ]
    },
    "960": {
      "op": "box_del",
      "defined_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%2#0",
        "{box_del}"
      ]
    },
    "961": {
      "op": "pop",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0",
        "tmp%20#0",
        "updated_data%2#0"
      ]
    },
    "962": {
      "op": "box_put",
      "stack_out": [
        "dappIds#0",
        "tmp%16#0"
      ]
    },
    "963": {
      "retsub": true,
      "op": "retsub"
    },
    "964": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectName",
      "params": {},
      "block": "getProjectName",
      "stack_in": [],
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "965": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "967": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "968": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "969": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "971": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "972": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "973": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "975": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "976": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "977": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "978": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "979": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "18"
      ]
    },
    "980": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "981": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "983": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "984": {
      "op": "substring3",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "985": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "988": {
      "retsub": true,
      "op": "retsub"
    },
    "989": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getDappIdByType",
      "params": {
        "type#0": "uint64"
      },
      "block": "getDappIdByType",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "992": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "993": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "995": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "996": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "997": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "999": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "1000": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "1001": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "1003": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1004": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1005": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1006": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1007": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "16"
      ]
    },
    "1008": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "1009": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1011": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "18"
      ]
    },
    "1012": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1013": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0"
      ]
    },
    "1014": {
      "op": "frame_dig -1",
      "defined_out": [
        "dappIds#0",
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)"
      ]
    },
    "1016": {
      "op": "intc_1 // 0",
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)",
        "0"
      ]
    },
    "1017": {
      "op": "<=",
      "defined_out": [
        "dappIds#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%5#0"
      ]
    },
    "1018": {
      "op": "bnz getDappIdByType_if_body@2",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "1021": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "1023": {
      "op": "intc_1 // 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0",
        "0"
      ]
    },
    "1024": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%6#0"
      ]
    },
    "1025": {
      "op": "frame_dig -1",
      "stack_out": [
        "dappIds#0",
        "tmp%6#0",
        "type#0 (copy)"
      ]
    },
    "1027": {
      "op": "<",
      "defined_out": [
        "dappIds#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%7#0"
      ]
    },
    "1028": {
      "op": "bz getDappIdByType_after_if_else@3",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "1031": {
      "block": "getDappIdByType_if_body@2",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "dappIds#0",
        "0"
      ]
    },
    "1032": {
      "op": "swap"
    },
    "1033": {
      "retsub": true,
      "op": "retsub"
    },
    "1034": {
      "block": "getDappIdByType_after_if_else@3",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)"
      ]
    },
    "1036": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)",
        "1"
      ]
    },
    "1037": {
      "op": "-",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%8#0"
      ]
    },
    "1038": {
      "op": "frame_dig 0",
      "defined_out": [
        "dappIds#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%8#0",
        "dappIds#0"
      ]
    },
    "1040": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "dappIds#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%8#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1043": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "array_head_and_tail%0#0",
        "tmp%8#0"
      ]
    },
    "1044": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "dappIds#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "array_head_and_tail%0#0",
        "tmp%8#0",
        "8"
      ]
    },
    "1046": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "dappIds#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1047": {
      "op": "extract_uint64",
      "defined_out": [
        "dappIds#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%10#0"
      ]
    },
    "1048": {
      "op": "swap"
    },
    "1049": {
      "retsub": true,
      "op": "retsub"
    },
    "1050": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getAllDappIds",
      "params": {},
      "block": "getAllDappIds",
      "stack_in": [],
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "1051": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "1053": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1054": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1055": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1057": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "1058": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "1059": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "1061": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1062": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1063": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1064": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1065": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "16"
      ]
    },
    "1066": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "1067": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1069": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "18"
      ]
    },
    "1070": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1071": {
      "op": "substring3",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1072": {
      "retsub": true,
      "op": "retsub"
    },
    "1073": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectHoldersDao",
      "params": {},
      "block": "getProjectHoldersDao",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1076": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "1077": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "1079": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1080": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1081": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1083": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "1084": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "1085": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "1087": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1088": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1089": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1090": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1091": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "16"
      ]
    },
    "1092": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "1093": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1095": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "18"
      ]
    },
    "1096": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1097": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0"
      ]
    },
    "1098": {
      "op": "dup",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "1099": {
      "op": "intc_1 // 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0",
        "0"
      ]
    },
    "1100": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%5#0"
      ]
    },
    "1101": {
      "op": "bz getProjectHoldersDao_ternary_false@2",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "1104": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "1106": {
      "op": "extract 2 8",
      "defined_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "1109": {
      "block": "getProjectHoldersDao_ternary_merge@3",
      "stack_in": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#0"
      ]
    },
    "1110": {
      "retsub": true,
      "op": "retsub"
    },
    "1111": {
      "block": "getProjectHoldersDao_ternary_false@2",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "1112": {
      "op": "b getProjectHoldersDao_ternary_merge@3"
    },
    "1115": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectRewardsDao",
      "params": {},
      "block": "getProjectRewardsDao",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1118": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "1119": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "1121": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1122": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1123": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1125": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "1126": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "1127": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "1129": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1130": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1131": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1132": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1133": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "16"
      ]
    },
    "1134": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "1135": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "1137": {
      "op": "intc_2 // 18",
      "defined_out": [
        "18",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "18"
      ]
    },
    "1138": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1139": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0"
      ]
    },
    "1140": {
      "op": "dup",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "1141": {
      "op": "intc_1 // 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0",
        "0"
      ]
    },
    "1142": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%5#0"
      ]
    },
    "1143": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "dappIds#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%5#0",
        "2"
      ]
    },
    "1145": {
      "op": ">=",
      "defined_out": [
        "dappIds#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%6#0"
      ]
    },
    "1146": {
      "op": "bz getProjectRewardsDao_ternary_false@2",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "1149": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "1151": {
      "op": "extract 10 8",
      "defined_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "1154": {
      "block": "getProjectRewardsDao_ternary_merge@3",
      "stack_in": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#0"
      ]
    },
    "1155": {
      "retsub": true,
      "op": "retsub"
    },
    "1156": {
      "block": "getProjectRewardsDao_ternary_false@2",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "1157": {
      "op": "b getProjectRewardsDao_ternary_merge@3"
    }
  }
}