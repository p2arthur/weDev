{
  "version": 3,
  "sources": [
    "/home/arthur/Documents/retreat/WeDev/we_repo/projects/we_repo/smart_contracts/we_repo/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AAgHG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AArFH;;;AAAA;AAqFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAjDH;;;AAAA;AAAA;;;AAAA;AAiDG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAzCH;;;AAAA;;;AAyCG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AApBH;;;AAAA;;;AAoBG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AARD;;;;;;;;;;;;;;;;;AAWmC;;AAAjC;AARF;AAW8B;AAA5B;;AAIF;;;AAZsD;AAe9B;;AAf8B;AAetB;AAAA;;AAA1B;;;AAfgD;AAiBjC;;AAjBiC;AAiBV;;;AAAxC;;AAKoB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAFa;;;;;;;;AAAA;AAAA;AApBiB;AAoBjC;;AApBiC;AAoBlD;AAAA;;AAAA;AAAA;AAvBJ;AAAA;AAAA;AAAA;AA6BmE;AAA5B;AA7BvC;AA6BI;AAAA;;AAGkD;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AA7BA;AA6BjC;;AA7BiC;AA6BzB;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAIJ;;;AAjCsD;AAoC5B;;AApC4B;AAoCpB;AAAA;;AAAhC;AAEkD;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAtCE;AAsCnC;;AAtCmC;AAsC3B;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAGF;;;;;;AAzCsD;AA4C9B;;AA5C8B;AA4CtB;AAAA;;AAA1B;;;AA5CgD;AA8CjC;;AA9CiC;AA8CV;;;AAAxC;;AA9CkD;AA+CjC;;AA/CiC;AA+ClD;AAAA;;AAAiC;;;;;;;;;;AAAjC;AAlDJ;AAAA;AAAA;AAAA;AAwDmE;AAA5B;AAxDvC;AAwDI;AAAA;AArDkD;AAyDnB;;AAzDmB;AAyDX;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAGhC;;AAAA;AAAA;AAAA;AAAA;;AAAR;;AAAA;AAAP;;;AACE;;AAAA;;;AAAa;AAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;AAIkB;;AAAA;AAAZ;;AAAO;AAAP;AAAR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAjEoD;AAoEnC;;AApEmC;AAoE3B;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;AApEoD;AAyE5B;;AAzE4B;AAyEpB;AAAA;;AAAhC;AAzEoD;AA0E5B;;AA1E4B;AA0EpB;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAiB;;;AAAvD;AAGF;;;AA7EsD;AA+E5B;;AA/E4B;AA+EpB;AAAA;;AAAhC;AA/EoD;AAgFnB;;AAhFmB;AAgFX;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAG3C;;AAAQ;AAAR;AAAA;;;AAA4B;;AAAA;AAAA;AAAf;;AAAA;AAAb;;;AACK;AAAP;AAAA;AAGa;;AAAO;AAAP;AAAR;;AAAA;;;AAAA;AAAA;AAAA;AAAkB;AAAzB;AAAA;AAvFoD;AA4F5B;;AA5F4B;AA4FpB;AAAA;;AAAhC;AA5FoD;AA6F5B;;AA7F4B;AA6FpB;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAtC;AAIF;;;AAjGsD;AAmG5B;;AAnG4B;AAmGpB;AAAA;;AAAhC;AAnGoD;AAoGnB;;AApGmB;AAoGX;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChC;AAAA;AAAR;;;AAAsB;;AAAA;;;AAA7B;AAAA;AAA0C;;;;AAG5C;;;AAxGsD;AA0G5B;;AA1G4B;AA0GpB;AAAA;;AAAhC;AA1GoD;AA2GnB;;AA3GmB;AA2GX;AAAA;AAAM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChC;AAAA;AAAU;AAAlB;AAAA;;;AAAsB;;AAAA;;;AAA7B;AAAA;AAA0C;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock \"_p\" 0x151f7c75 \"total_projects\" 0x0000000000000000"
    },
    "41": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "43": {
      "op": "bz main_after_if_else@15",
      "stack_out": []
    },
    "46": {
      "op": "pushbytess 0xb8447b36 0xb6113dc7 0xf83918ba 0x8246c525 0x2557f664 0xea638972 0xe9894450 0x8dc0b23e 0x1d77c9f1 // method \"createApplication()void\", method \"createNewProject(string)void\", method \"updateProjectName(string)void\", method \"createProjectMicroDapp(uint64,uint64)void\", method \"getProjectName()string\", method \"getDappIdByType(uint64)uint64\", method \"getAllDappIds()uint64[]\", method \"getProjectHoldersDao()uint64\", method \"getProjectRewardsDao()uint64\"",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(createNewProject(string)void)",
        "Method(createProjectMicroDapp(uint64,uint64)void)",
        "Method(getAllDappIds()uint64[])",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectName()string)",
        "Method(getProjectRewardsDao()uint64)",
        "Method(updateProjectName(string)void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(createNewProject(string)void)",
        "Method(updateProjectName(string)void)",
        "Method(createProjectMicroDapp(uint64,uint64)void)",
        "Method(getProjectName()string)",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getAllDappIds()uint64[])",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectRewardsDao()uint64)"
      ]
    },
    "93": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(createNewProject(string)void)",
        "Method(createProjectMicroDapp(uint64,uint64)void)",
        "Method(getAllDappIds()uint64[])",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectName()string)",
        "Method(getProjectRewardsDao()uint64)",
        "Method(updateProjectName(string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(createNewProject(string)void)",
        "Method(updateProjectName(string)void)",
        "Method(createProjectMicroDapp(uint64,uint64)void)",
        "Method(getProjectName()string)",
        "Method(getDappIdByType(uint64)uint64)",
        "Method(getAllDappIds()uint64[])",
        "Method(getProjectHoldersDao()uint64)",
        "Method(getProjectRewardsDao()uint64)",
        "tmp%2#0"
      ]
    },
    "96": {
      "op": "match main_createApplication_route@3 main_createNewProject_route@4 main_updateProjectName_route@5 main_createProjectMicroDapp_route@6 main_getProjectName_route@7 main_getDappIdByType_route@8 main_getAllDappIds_route@9 main_getProjectHoldersDao_route@10 main_getProjectRewardsDao_route@11",
      "stack_out": []
    },
    "116": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "block": "main_getProjectRewardsDao_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "120": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "121": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "122": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "125": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectRewardsDao",
      "op": "callsub getProjectRewardsDao",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "128": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "0x151f7c75"
      ]
    },
    "129": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%52#0"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "131": {
      "op": "log",
      "stack_out": []
    },
    "132": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "133": {
      "op": "return",
      "stack_out": []
    },
    "134": {
      "block": "main_getProjectHoldersDao_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "136": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "137": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "140": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "141": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectHoldersDao",
      "op": "callsub getProjectHoldersDao",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "144": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0x151f7c75"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%46#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "147": {
      "op": "log",
      "stack_out": []
    },
    "148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "return",
      "stack_out": []
    },
    "150": {
      "block": "main_getAllDappIds_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "152": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "153": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "154": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "156": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "157": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getAllDappIds",
      "op": "callsub getAllDappIds",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "160": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "0x151f7c75"
      ]
    },
    "161": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%40#0"
      ]
    },
    "162": {
      "op": "concat",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "163": {
      "op": "log",
      "stack_out": []
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "block": "main_getDappIdByType_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "176": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "177": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getDappIdByType",
      "op": "callsub getDappIdByType",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "180": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "181": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "182": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "183": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "184": {
      "op": "log",
      "stack_out": []
    },
    "185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "186": {
      "op": "return",
      "stack_out": []
    },
    "187": {
      "block": "main_getProjectName_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "189": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "190": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "191": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "193": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "194": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectName",
      "op": "callsub getProjectName",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "197": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "198": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "199": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "200": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "203": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "204": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "205": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "207": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "208": {
      "op": "log",
      "stack_out": []
    },
    "209": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": []
    },
    "211": {
      "block": "main_createProjectMicroDapp_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "213": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "214": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "215": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "217": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "218": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "221": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "222": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "225": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "226": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createProjectMicroDapp",
      "op": "callsub createProjectMicroDapp",
      "stack_out": []
    },
    "229": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "return",
      "stack_out": []
    },
    "231": {
      "block": "main_updateProjectName_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "233": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "238": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "241": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "244": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.updateProjectName",
      "op": "callsub updateProjectName",
      "stack_out": []
    },
    "247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "return",
      "stack_out": []
    },
    "249": {
      "block": "main_createNewProject_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "251": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "252": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "253": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "255": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "256": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "259": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "262": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createNewProject",
      "op": "callsub createNewProject",
      "stack_out": []
    },
    "265": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "266": {
      "op": "return",
      "stack_out": []
    },
    "267": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "269": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "270": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "271": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "273": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "274": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "275": {
      "callsub": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createApplication",
      "op": "callsub createApplication"
    },
    "278": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "279": {
      "op": "return",
      "stack_out": []
    },
    "280": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "pushbytes \"manager_address\"",
      "defined_out": [
        "\"manager_address\""
      ],
      "stack_out": [
        "\"manager_address\""
      ]
    },
    "297": {
      "op": "txn Sender",
      "defined_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ]
    },
    "299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "300": {
      "op": "bytec_2 // \"total_projects\"",
      "defined_out": [
        "\"total_projects\""
      ],
      "stack_out": [
        "\"total_projects\""
      ]
    },
    "301": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_projects\"",
        "0"
      ],
      "stack_out": [
        "\"total_projects\"",
        "0"
      ]
    },
    "302": {
      "op": "app_global_put",
      "stack_out": []
    },
    "303": {
      "retsub": true,
      "op": "retsub"
    },
    "304": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createNewProject",
      "params": {
        "project_name#0": "bytes"
      },
      "block": "createNewProject",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "307": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "308": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "311": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "312": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "314": {
      "op": "bnz createNewProject_else_body@2",
      "stack_out": []
    },
    "317": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "318": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "321": {
      "op": "pushint 500 // 500",
      "defined_out": [
        "500",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "500"
      ]
    },
    "324": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "325": {
      "op": "pop",
      "stack_out": []
    },
    "326": {
      "op": "frame_dig -1",
      "defined_out": [
        "project_name#0 (copy)"
      ],
      "stack_out": [
        "project_name#0 (copy)"
      ]
    },
    "328": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "330": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "333": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_uint16%0#0",
        "project_name#0 (copy)"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "336": {
      "op": "pushbytes 0x000400060000",
      "defined_out": [
        "0x000400060000",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x000400060000"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "0x000400060000",
        "encoded_value%0#0"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0"
      ]
    },
    "346": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "\"_p\""
      ]
    },
    "347": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "encoded_tuple_buffer%4#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "\"_p\"",
        "tmp%4#0"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "350": {
      "op": "dup",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "351": {
      "op": "box_del",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "352": {
      "op": "pop",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%5#0"
      ]
    },
    "353": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "354": {
      "op": "box_put",
      "stack_out": []
    },
    "355": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "356": {
      "op": "bytec_2 // \"total_projects\"",
      "defined_out": [
        "\"total_projects\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_projects\""
      ]
    },
    "357": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "358": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "359": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "360": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "361": {
      "op": "bytec_2 // \"total_projects\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_projects\""
      ]
    },
    "362": {
      "op": "swap",
      "stack_out": [
        "\"total_projects\"",
        "new_state_value%0#0"
      ]
    },
    "363": {
      "op": "app_global_put",
      "stack_out": []
    },
    "364": {
      "retsub": true,
      "op": "retsub"
    },
    "365": {
      "block": "createNewProject_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "project_name#0 (copy)"
      ],
      "stack_out": [
        "project_name#0 (copy)"
      ]
    },
    "367": {
      "op": "len",
      "defined_out": [
        "length%1#0"
      ],
      "stack_out": [
        "length%1#0"
      ]
    },
    "368": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0"
      ],
      "stack_out": [
        "as_bytes%3#0"
      ]
    },
    "369": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0"
      ],
      "stack_out": [
        "length_uint16%1#0"
      ]
    },
    "372": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_uint16%1#0",
        "project_name#0 (copy)"
      ]
    },
    "374": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "375": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "\"_p\""
      ]
    },
    "376": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "encoded_value%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "\"_p\"",
        "tmp%6#0"
      ]
    },
    "378": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0"
      ]
    },
    "379": {
      "op": "dup",
      "defined_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "380": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%1#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "381": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "maybe_value%2#0"
      ]
    },
    "382": {
      "op": "dup",
      "defined_out": [
        "encoded_value%1#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "383": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "encoded_value%1#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "2"
      ]
    },
    "384": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_value%1#0",
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "item_offset%0#0"
      ]
    },
    "385": {
      "op": "intc_0 // 0"
    },
    "386": {
      "op": "swap",
      "defined_out": [
        "0",
        "encoded_value%1#0",
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "387": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "encoded_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "tmp%7#0",
        "data_up_to_item%0#0"
      ]
    },
    "388": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "data_up_to_item%0#0",
        "encoded_value%1#0"
      ]
    },
    "390": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "updated_data%0#0"
      ]
    },
    "391": {
      "op": "dig 1",
      "stack_out": [
        "tmp%7#0",
        "updated_data%0#0",
        "tmp%7#0 (copy)"
      ]
    },
    "393": {
      "op": "box_del",
      "defined_out": [
        "tmp%7#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%7#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "394": {
      "op": "pop",
      "stack_out": [
        "tmp%7#0",
        "updated_data%0#0"
      ]
    },
    "395": {
      "op": "box_put",
      "stack_out": []
    },
    "396": {
      "retsub": true,
      "op": "retsub"
    },
    "397": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.updateProjectName",
      "params": {
        "new_project_name#0": "bytes"
      },
      "block": "updateProjectName",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "400": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "401": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "404": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "405": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "407": {
      "error": "Project created by the given address does not exist",
      "op": "assert // Project created by the given address does not exist",
      "stack_out": []
    },
    "408": {
      "op": "frame_dig -1",
      "defined_out": [
        "new_project_name#0 (copy)"
      ],
      "stack_out": [
        "new_project_name#0 (copy)"
      ]
    },
    "410": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "411": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "412": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "415": {
      "op": "frame_dig -1",
      "stack_out": [
        "length_uint16%0#0",
        "new_project_name#0 (copy)"
      ]
    },
    "417": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "418": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "encoded_value%0#0",
        "\"_p\""
      ]
    },
    "419": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "encoded_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "421": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0"
      ]
    },
    "422": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "423": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "424": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "425": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "426": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "encoded_value%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "427": {
      "op": "extract_uint16",
      "defined_out": [
        "encoded_value%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "item_offset%0#0"
      ]
    },
    "428": {
      "op": "intc_0 // 0"
    },
    "429": {
      "op": "swap",
      "defined_out": [
        "0",
        "encoded_value%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "0",
        "item_offset%0#0"
      ]
    },
    "430": {
      "op": "extract3",
      "defined_out": [
        "data_up_to_item%0#0",
        "encoded_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "tmp%3#0",
        "data_up_to_item%0#0"
      ]
    },
    "431": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "data_up_to_item%0#0",
        "encoded_value%0#0"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "434": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "tmp%3#0 (copy)"
      ]
    },
    "436": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0",
        "{box_del}"
      ]
    },
    "437": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0",
        "updated_data%0#0"
      ]
    },
    "438": {
      "op": "box_put",
      "stack_out": []
    },
    "439": {
      "retsub": true,
      "op": "retsub"
    },
    "440": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.createProjectMicroDapp",
      "params": {
        "dappId#0": "uint64",
        "type#0": "uint64"
      },
      "block": "createProjectMicroDapp",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "444": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "446": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\""
      ]
    },
    "447": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "450": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "451": {
      "op": "bury 1",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_exists%0#0"
      ]
    },
    "453": {
      "op": "bnz createProjectMicroDapp_after_if_else@2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "456": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\""
      ]
    },
    "457": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "459": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%3#0"
      ]
    },
    "460": {
      "op": "pushint 500 // 500",
      "defined_out": [
        "500",
        "tmp%3#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%3#0",
        "500"
      ]
    },
    "463": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "{box_create}"
      ]
    },
    "464": {
      "op": "pop",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "465": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\""
      ]
    },
    "466": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\"",
        "tmp%4#0"
      ]
    },
    "468": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%5#0"
      ]
    },
    "469": {
      "op": "dup",
      "defined_out": [
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "470": {
      "op": "box_del",
      "defined_out": [
        "tmp%5#0",
        "{box_del}"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "471": {
      "op": "pop",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%5#0"
      ]
    },
    "472": {
      "op": "pushbytes 0x0004000600000000",
      "defined_out": [
        "0x0004000600000000",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%5#0",
        "0x0004000600000000"
      ]
    },
    "482": {
      "op": "box_put",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "483": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "0"
      ]
    },
    "484": {
      "op": "bytec_2 // \"total_projects\"",
      "defined_out": [
        "\"total_projects\"",
        "0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "0",
        "\"total_projects\""
      ]
    },
    "485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "486": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%1#0"
      ]
    },
    "487": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "488": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "new_state_value%0#0"
      ]
    },
    "489": {
      "op": "bytec_2 // \"total_projects\"",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "new_state_value%0#0",
        "\"total_projects\""
      ]
    },
    "490": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"total_projects\"",
        "new_state_value%0#0"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "492": {
      "block": "createProjectMicroDapp_after_if_else@2",
      "stack_in": [
        "dappIds#0",
        "tmp%9#0"
      ],
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\""
      ]
    },
    "493": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "\"_p\"",
        "tmp%6#0"
      ]
    },
    "495": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "496": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "497": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "498": {
      "op": "dup",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "499": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "0"
      ]
    },
    "500": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "item_start_offset%0#0"
      ]
    },
    "501": {
      "op": "dig 1",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "item_start_offset%0#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "503": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "item_start_offset%0#0",
        "maybe_value%2#0 (copy)",
        "2"
      ]
    },
    "504": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "505": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0"
      ]
    },
    "506": {
      "op": "frame_bury 0",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "508": {
      "block": "createProjectMicroDapp_while_top@3",
      "stack_in": [
        "dappIds#0",
        "tmp%9#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0"
      ]
    },
    "510": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "0"
      ]
    },
    "511": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "512": {
      "op": "dup",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "513": {
      "op": "frame_bury 1",
      "defined_out": [
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "515": {
      "op": "frame_dig -1",
      "defined_out": [
        "dappIds#0",
        "tmp%9#0",
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%9#0",
        "type#0 (copy)"
      ]
    },
    "517": {
      "op": "<",
      "defined_out": [
        "dappIds#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "518": {
      "op": "bz createProjectMicroDapp_after_while@5",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "521": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0"
      ]
    },
    "523": {
      "op": "extract 2 0",
      "defined_out": [
        "dappIds#0",
        "expr_value_trimmed%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "expr_value_trimmed%0#0"
      ]
    },
    "526": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "dappIds#0",
        "expr_value_trimmed%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "expr_value_trimmed%0#0",
        "0x0000000000000000"
      ]
    },
    "527": {
      "op": "concat",
      "defined_out": [
        "concatenated%0#0",
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "concatenated%0#0"
      ]
    },
    "528": {
      "op": "dup",
      "defined_out": [
        "concatenated%0#0",
        "concatenated%0#0 (copy)",
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "concatenated%0#0",
        "concatenated%0#0 (copy)"
      ]
    },
    "529": {
      "op": "len",
      "defined_out": [
        "byte_len%0#0",
        "concatenated%0#0",
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "concatenated%0#0",
        "byte_len%0#0"
      ]
    },
    "530": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "byte_len%0#0",
        "concatenated%0#0",
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "concatenated%0#0",
        "byte_len%0#0",
        "8"
      ]
    },
    "531": {
      "op": "/",
      "defined_out": [
        "concatenated%0#0",
        "dappIds#0",
        "len_%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "concatenated%0#0",
        "len_%0#0"
      ]
    },
    "532": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%0#0",
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "concatenated%0#0",
        "as_bytes%2#0"
      ]
    },
    "533": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%0#0",
        "dappIds#0",
        "len_16_bit%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "concatenated%0#0",
        "len_16_bit%0#0"
      ]
    },
    "536": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "len_16_bit%0#0",
        "concatenated%0#0"
      ]
    },
    "537": {
      "op": "concat",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0"
      ]
    },
    "538": {
      "op": "frame_bury 0",
      "defined_out": [
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "540": {
      "op": "b createProjectMicroDapp_while_top@3"
    },
    "543": {
      "block": "createProjectMicroDapp_after_while@5",
      "stack_in": [
        "dappIds#0",
        "tmp%9#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "dappId#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappId#0 (copy)"
      ]
    },
    "545": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ]
    },
    "546": {
      "op": "frame_dig -1",
      "defined_out": [
        "type#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "type#0 (copy)"
      ]
    },
    "548": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "type#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "type#0 (copy)",
        "1"
      ]
    },
    "549": {
      "op": "-",
      "defined_out": [
        "tmp%11#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%11#0"
      ]
    },
    "550": {
      "op": "dup",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)"
      ]
    },
    "551": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%9#0"
      ]
    },
    "553": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%0#0",
        "tmp%11#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%11#0",
        "index_is_in_bounds%0#0"
      ]
    },
    "554": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%11#0"
      ]
    },
    "555": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%11#0",
        "tmp%9#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "tmp%11#0",
        "8"
      ]
    },
    "556": {
      "op": "*",
      "defined_out": [
        "tmp%9#0",
        "val_as_bytes%0#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "write_offset%0#0"
      ]
    },
    "557": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "write_offset%0#0",
        "2"
      ]
    },
    "558": {
      "op": "+",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "write_offset%0#0"
      ]
    },
    "559": {
      "op": "frame_dig 0",
      "defined_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "write_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "write_offset%0#0",
        "dappIds#0"
      ]
    },
    "561": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "val_as_bytes%0#0",
        "dappIds#0",
        "write_offset%0#0"
      ]
    },
    "562": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "write_offset%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "564": {
      "op": "replace3",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0"
      ]
    },
    "565": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "dappIds#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "\"_p\""
      ]
    },
    "566": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "dappIds#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "\"_p\"",
        "tmp%12#0"
      ]
    },
    "568": {
      "op": "concat",
      "defined_out": [
        "dappIds#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0"
      ]
    },
    "569": {
      "op": "dup",
      "defined_out": [
        "dappIds#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "570": {
      "op": "box_get",
      "defined_out": [
        "dappIds#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "571": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0"
      ]
    },
    "572": {
      "op": "dup",
      "defined_out": [
        "dappIds#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "573": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "dappIds#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "0"
      ]
    },
    "574": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "item_offset%0#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0"
      ]
    },
    "575": {
      "op": "dig 1",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "577": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "maybe_value%3#0 (copy)",
        "0"
      ]
    },
    "578": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "dappIds#0",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "maybe_value%3#0 (copy)",
        "0",
        "item_offset%0#0 (copy)"
      ]
    },
    "580": {
      "op": "extract3",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%3#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "581": {
      "op": "dig 2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "583": {
      "op": "intc_2 // 2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "maybe_value%3#0 (copy)",
        "2"
      ]
    },
    "584": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%3#0",
        "next_item_offset%0#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0"
      ]
    },
    "585": {
      "op": "dig 3",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "587": {
      "op": "len",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%3#0",
        "next_item_offset%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "maybe_value%3#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0"
      ]
    },
    "588": {
      "op": "uncover 4",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "maybe_value%3#0"
      ]
    },
    "590": {
      "op": "dig 2",
      "defined_out": [
        "dappIds#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "maybe_value%3#0",
        "next_item_offset%0#0",
        "next_item_offset%0#0 (copy)",
        "tmp%13#0",
        "tmp%9#0",
        "total_data_length%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "total_data_length%0#0",
        "maybe_value%3#0",
        "next_item_offset%0#0 (copy)"
      ]
    },
    "592": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "maybe_value%3#0",
        "next_item_offset%0#0 (copy)",
        "total_data_length%0#0"
      ]
    },
    "594": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "data_up_to_item%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "595": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0"
      ]
    },
    "597": {
      "op": "dig 5",
      "defined_out": [
        "dappIds#0",
        "dappIds#0 (copy)",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "data_up_to_item%0#0",
        "dappIds#0 (copy)"
      ]
    },
    "599": {
      "op": "concat",
      "defined_out": [
        "dappIds#0",
        "data_beyond_item%0#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "data_beyond_item%0#0",
        "updated_data%0#0"
      ]
    },
    "600": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%0#0",
        "data_beyond_item%0#0"
      ]
    },
    "601": {
      "op": "concat",
      "defined_out": [
        "dappIds#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "next_item_offset%0#0",
        "updated_data%1#0"
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "item_offset%0#0",
        "updated_data%1#0",
        "next_item_offset%0#0"
      ]
    },
    "603": {
      "op": "uncover 2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "updated_data%1#0",
        "next_item_offset%0#0",
        "item_offset%0#0"
      ]
    },
    "605": {
      "op": "-",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "dappIds#0",
        "tmp%13#0",
        "updated_data%1#0",
        "item_length%0#0"
      ]
    },
    "606": {
      "op": "uncover 3",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "item_length%0#0",
        "dappIds#0"
      ]
    },
    "608": {
      "op": "len",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0"
      ]
    },
    "609": {
      "op": "dig 2",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0",
        "updated_data%1#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)"
      ]
    },
    "611": {
      "op": "intc_2 // 2",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "updated_data%1#0 (copy)",
        "2"
      ]
    },
    "612": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "item_length%0#0",
        "new_value_length%0#0",
        "tail_offset%0#0"
      ]
    },
    "613": {
      "op": "+",
      "defined_out": [
        "dappIds#0",
        "item_length%0#0",
        "tail_offset%1#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "item_length%0#0",
        "tail_offset%1#0"
      ]
    },
    "614": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "tail_offset%1#0",
        "item_length%0#0"
      ]
    },
    "615": {
      "op": "-",
      "defined_out": [
        "dappIds#0",
        "tail_offset%2#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "tail_offset%2#0"
      ]
    },
    "616": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "dappIds#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "as_bytes%3#0"
      ]
    },
    "617": {
      "op": "extract 6 2",
      "defined_out": [
        "dappIds#0",
        "tail_offset_bytes%0#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%1#0",
        "tail_offset_bytes%0#0"
      ]
    },
    "620": {
      "op": "replace2 2",
      "defined_out": [
        "dappIds#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%2#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%2#0"
      ]
    },
    "622": {
      "op": "dig 1",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%2#0",
        "tmp%13#0 (copy)"
      ]
    },
    "624": {
      "op": "box_del",
      "defined_out": [
        "dappIds#0",
        "tmp%13#0",
        "tmp%9#0",
        "updated_data%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%2#0",
        "{box_del}"
      ]
    },
    "625": {
      "op": "pop",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0",
        "tmp%13#0",
        "updated_data%2#0"
      ]
    },
    "626": {
      "op": "box_put",
      "stack_out": [
        "dappIds#0",
        "tmp%9#0"
      ]
    },
    "627": {
      "retsub": true,
      "op": "retsub"
    },
    "628": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectName",
      "params": {},
      "block": "getProjectName",
      "stack_in": [],
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "629": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "631": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "632": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "633": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "635": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "636": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "637": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "639": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "640": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "641": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "642": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "643": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "644": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "645": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "647": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "648": {
      "op": "substring3",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "649": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "652": {
      "retsub": true,
      "op": "retsub"
    },
    "653": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getDappIdByType",
      "params": {
        "type#0": "uint64"
      },
      "block": "getDappIdByType",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "656": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "657": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "660": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "661": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "663": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "664": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "665": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "667": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "668": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "669": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "670": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "671": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "0"
      ]
    },
    "672": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "673": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "675": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "676": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "677": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0"
      ]
    },
    "678": {
      "op": "frame_dig -1",
      "defined_out": [
        "dappIds#0",
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)"
      ]
    },
    "680": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)",
        "0"
      ]
    },
    "681": {
      "op": "<=",
      "defined_out": [
        "dappIds#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%5#0"
      ]
    },
    "682": {
      "op": "bnz getDappIdByType_if_body@2",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "685": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "687": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0",
        "0"
      ]
    },
    "688": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%6#0"
      ]
    },
    "689": {
      "op": "frame_dig -1",
      "stack_out": [
        "dappIds#0",
        "tmp%6#0",
        "type#0 (copy)"
      ]
    },
    "691": {
      "op": "<",
      "defined_out": [
        "dappIds#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%7#0"
      ]
    },
    "692": {
      "op": "bz getDappIdByType_after_if_else@3",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "695": {
      "block": "getDappIdByType_if_body@2",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "dappIds#0",
        "0"
      ]
    },
    "696": {
      "op": "swap"
    },
    "697": {
      "retsub": true,
      "op": "retsub"
    },
    "698": {
      "block": "getDappIdByType_after_if_else@3",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)"
      ]
    },
    "700": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "type#0 (copy)"
      ],
      "stack_out": [
        "dappIds#0",
        "type#0 (copy)",
        "1"
      ]
    },
    "701": {
      "op": "-",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%8#0"
      ]
    },
    "702": {
      "op": "frame_dig 0",
      "defined_out": [
        "dappIds#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%8#0",
        "dappIds#0"
      ]
    },
    "704": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "dappIds#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%8#0",
        "array_head_and_tail%0#0"
      ]
    },
    "707": {
      "op": "swap",
      "stack_out": [
        "dappIds#0",
        "array_head_and_tail%0#0",
        "tmp%8#0"
      ]
    },
    "708": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "dappIds#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "dappIds#0",
        "array_head_and_tail%0#0",
        "tmp%8#0",
        "8"
      ]
    },
    "709": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "dappIds#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "710": {
      "op": "extract_uint64",
      "defined_out": [
        "dappIds#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%10#0"
      ]
    },
    "711": {
      "op": "swap"
    },
    "712": {
      "retsub": true,
      "op": "retsub"
    },
    "713": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getAllDappIds",
      "params": {},
      "block": "getAllDappIds",
      "stack_in": [],
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "714": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "717": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "718": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "720": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "721": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "722": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "725": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "726": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "727": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "728": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "0"
      ]
    },
    "729": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "730": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "732": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "733": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "734": {
      "op": "substring3",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "735": {
      "retsub": true,
      "op": "retsub"
    },
    "736": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectHoldersDao",
      "params": {},
      "block": "getProjectHoldersDao",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "739": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "740": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "742": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "743": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "744": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "746": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "747": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "748": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "750": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "751": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "752": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "753": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "754": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "0"
      ]
    },
    "755": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "756": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "758": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "759": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "760": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0"
      ]
    },
    "761": {
      "op": "dup",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "762": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0",
        "0"
      ]
    },
    "763": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%5#0"
      ]
    },
    "764": {
      "op": "bz getProjectHoldersDao_ternary_false@2",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "767": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "769": {
      "op": "extract 2 8",
      "defined_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "772": {
      "block": "getProjectHoldersDao_ternary_merge@3",
      "stack_in": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#0"
      ]
    },
    "773": {
      "retsub": true,
      "op": "retsub"
    },
    "774": {
      "block": "getProjectHoldersDao_ternary_false@2",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "775": {
      "op": "b getProjectHoldersDao_ternary_merge@3"
    },
    "778": {
      "subroutine": "smart_contracts/we_repo/contract.algo.ts::WeRepo.getProjectRewardsDao",
      "params": {},
      "block": "getProjectRewardsDao",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "781": {
      "op": "bytec_0 // \"_p\"",
      "defined_out": [
        "\"_p\""
      ],
      "stack_out": [
        "\"_p\""
      ]
    },
    "782": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%0#0"
      ]
    },
    "784": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "785": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "786": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "788": {
      "error": "Project does not exist",
      "op": "assert // Project does not exist",
      "stack_out": []
    },
    "789": {
      "op": "bytec_0 // \"_p\"",
      "stack_out": [
        "\"_p\""
      ]
    },
    "790": {
      "op": "txn Sender",
      "defined_out": [
        "\"_p\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"_p\"",
        "tmp%2#0"
      ]
    },
    "792": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "793": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "794": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "795": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "796": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "0"
      ]
    },
    "797": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0"
      ]
    },
    "798": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "800": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "maybe_value%1#0 (copy)",
        "2"
      ]
    },
    "801": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "802": {
      "op": "substring3",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0"
      ]
    },
    "803": {
      "op": "dup",
      "defined_out": [
        "dappIds#0"
      ],
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "804": {
      "op": "intc_0 // 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0",
        "0"
      ]
    },
    "805": {
      "op": "extract_uint16",
      "defined_out": [
        "dappIds#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%5#0"
      ]
    },
    "806": {
      "op": "intc_2 // 2",
      "stack_out": [
        "dappIds#0",
        "tmp%5#0",
        "2"
      ]
    },
    "807": {
      "op": ">=",
      "defined_out": [
        "dappIds#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "dappIds#0",
        "tmp%6#0"
      ]
    },
    "808": {
      "op": "bz getProjectRewardsDao_ternary_false@2",
      "stack_out": [
        "dappIds#0"
      ]
    },
    "811": {
      "op": "frame_dig 0",
      "stack_out": [
        "dappIds#0",
        "dappIds#0"
      ]
    },
    "813": {
      "op": "extract 10 8",
      "defined_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "816": {
      "block": "getProjectRewardsDao_ternary_merge@3",
      "stack_in": [
        "dappIds#0",
        "ternary_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "ternary_result%0#0"
      ]
    },
    "817": {
      "retsub": true,
      "op": "retsub"
    },
    "818": {
      "block": "getProjectRewardsDao_ternary_false@2",
      "stack_in": [
        "dappIds#0"
      ],
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "dappIds#0",
        "ternary_result%0#0"
      ]
    },
    "819": {
      "op": "b getProjectRewardsDao_ternary_merge@3"
    }
  }
}